import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.5aebcaaa.js";const t={},e=p(`<h1 id="threadlocalrandom" tabindex="-1"><a class="header-anchor" href="#threadlocalrandom" aria-hidden="true">#</a> \u{1F7E8} ThreadLocalRandom</h1><h2 id="_1-\u7C7B\u6CE8\u91CA" tabindex="-1"><a class="header-anchor" href="#_1-\u7C7B\u6CE8\u91CA" aria-hidden="true">#</a> 1. \u7C7B\u6CE8\u91CA</h2><ul><li><code>Random</code> \u7C7B\u6BCF\u6B21\u83B7\u53D6\u968F\u673A\u6570\u65F6\uFF0C\u901A\u8FC7 <code>CAS</code> \u4FEE\u6539 seed \u503C\uFF0C\u591A\u7EBF\u7A0B\u5E76\u53D1\u4E0B\uFF0C\u53EA\u80FD\u6709\u4E00\u4E2A\u7EBF\u7A0B\u6210\u529F\u4FEE\u6539 seed \u503C\uFF0C\u5176\u4F59\u7EBF\u7A0B\u65E0\u9650\u91CD\u8BD5 <ul><li>\u51B2\u7A81\u9AD8\u65F6\uFF0C\u5F71\u54CD\u5E76\u53D1\u6548\u7387</li></ul></li><li><code>ThreadLocalRandom</code> \u7C7B\u6BCF\u6B21\u83B7\u53D6\u968F\u673A\u6570\u65F6\uFF0C\u901A\u8FC7 Unsafe \u7C7B\u76F4\u63A5\u4FEE\u6539 <code>seed</code> \u503C\uFF0C\u5404\u7EBF\u7A0B\u4E0B seed \u4E92\u4E0D\u5F71\u54CD\uFF0C\u53EA\u4E0E <strong>\u5F53\u524D\u7EBF\u7A0B</strong> \u6709\u5173\uFF0C\u56E0\u6B64\u4E5F\u65E0\u9700\u901A\u8FC7 CAS \u8BBE\u7F6E <ul><li>\u9AD8\u5E76\u53D1\u4E0B\uFF0C\u4E0D\u5F71\u54CD\u5E76\u53D1\u6548\u7387</li></ul></li></ul><h3 id="\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528" aria-hidden="true">#</a> \u4F7F\u7528</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ThreadLocalRandom</span> rand <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u83B7\u53D6\u5F53\u524D\u7EBF\u7A0B\u5BF9\u5E94\u7684 ThreadLocalRandom \u5355\u4F8B</span>
<span class="token keyword">int</span> rint <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u751F\u6210 [0, 10) \u7684\u968F\u673A\u6570</span>
<span class="token keyword">double</span> rdou <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u751F\u6210 [3.0, 29) \u7684\u968F\u673A\u6570</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-\u6E90\u7801" tabindex="-1"><a class="header-anchor" href="#_2-\u6E90\u7801" aria-hidden="true">#</a> 2. \u6E90\u7801</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalRandom</span> <span class="token keyword">extends</span> <span class="token class-name">Random</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u539F\u5B50\u7C7B -- \u521D\u59CB\u5316\u7528</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> probeGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROBE_INCREMENT <span class="token operator">=</span> <span class="token number">0x9e3779b9</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u65F6\uFF0C\u539F\u5B50\u7C7B\u7684\u6BCF\u6B21\u589E\u957F\u503C</span>
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> seeder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token function">initialSeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u539F\u5B50\u7C7B -- \u79CD\u5B50\u503C</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> SEEDER_INCREMENT <span class="token operator">=</span> <span class="token number">0</span>xbb67ae8584caa73bL<span class="token punctuation">;</span> <span class="token comment">// \u79CD\u5B50\u7684\u589E\u957F\u503C</span>
    
    <span class="token keyword">boolean</span> initialized<span class="token punctuation">;</span> <span class="token comment">// \u4EC5\u5728\u5355\u4F8B\u521D\u59CB\u5316\u671F\u95F4\u4F7F\u7528\u7684\u5B57\u6BB5\u3002\u6784\u9020\u51FD\u6570\u5B8C\u6210\u65F6\u4E3A\u771F\u3002</span>
    
    <span class="token comment">// \u79C1\u6709\u6784\u9020\u65B9\u6CD5\uFF0C\u53EA\u80FD\u901A\u8FC7 ThreadLocalRandom.current() \u5F97\u5230 -- \u5355\u4F8B\u6A21\u5F0F</span>
    <span class="token keyword">private</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        initialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// false during super() call</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocalRandom</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// \u63D0\u4F9B\u7684\u5916\u90E8\u8BBF\u95EE\u5355\u4F8B</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocalRandom</span> <span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>UNSAFE<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PROBE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">localInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u4E3A\u5F53\u524D\u7EBF\u7A0B\u521D\u59CB\u5316\u7EBF\u7A0B\u5B57\u6BB5</span>
    <span class="token comment">// \u4EC5\u5728 Thread.threadLocalRandomProbe \u4E3A\u96F6\u65F6\u8C03\u7528\uFF0C\u8868\u793A\u9700\u8981\u751F\u6210\u7EBF\u7A0B\u672C\u5730\u79CD\u5B50\u503C\u3002</span>
    <span class="token comment">// \u5373\u4F7F\u521D\u59CB\u5316\u662F\u7EAF\u7EBF\u7A0B\u672C\u5730\u7684\uFF0C\u6211\u4EEC\u4E5F\u9700\u8981\u4F9D\u8D56\uFF08\u9759\u6001\uFF09\u539F\u5B50\u751F\u6210\u5668\u6765\u521D\u59CB\u5316\u503C\u3002</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">localInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> p <span class="token operator">=</span> probeGenerator<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>PROBE_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> probe <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> p<span class="token punctuation">;</span> <span class="token comment">// skip 0</span>
        <span class="token keyword">long</span> seed <span class="token operator">=</span> <span class="token function">mix64</span><span class="token punctuation">(</span>seeder<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span>SEEDER_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u5316\u79CD\u5B50\u503C</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        UNSAFE<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> SEED<span class="token punctuation">,</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        UNSAFE<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> PROBE<span class="token punctuation">,</span> probe<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// public \u65B9\u6CD5\u4E2D\u83B7\u53D6\u968F\u673A\u6570\u65F6\uFF0C\u7528\u5230</span>
    <span class="token comment">// seed \u7684\u751F\u6210\u53EA\u4E0E \u5F53\u524D\u7EBF\u7A0B\u6709\u5173\uFF0C\u56E0\u6B64 \u591A\u7EBF\u7A0B\u4E0B\u65E0\u51B2\u7A81</span>
    <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">nextSeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">long</span> r <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> SEED<span class="token punctuation">)</span> <span class="token operator">+</span> GAMMA<span class="token punctuation">;</span> 
        UNSAFE<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> SEED<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ---------- \u63D0\u4F9B\u7684 \u5916\u90E8\u65B9\u6CD5 ---------------</span>
    <span class="token comment">// \u8FD4\u56DE [origin, bound) \u968F\u673A int \u503C --&gt; ThreadLocalRandom \u72EC\u6709</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> origin<span class="token punctuation">,</span> <span class="token keyword">int</span> bound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>origin <span class="token operator">&gt;=</span> bound<span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">BadRange</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">internalNextInt</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> bound<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u8FD4\u56DE [0, bound) \u968F\u673A int \u503C --&gt; \u91CD\u5199 Random \u65B9\u6CD5</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> bound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bound <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">BadBound</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">mix32</span><span class="token punctuation">(</span><span class="token function">nextSeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> bound <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bound <span class="token operator">&amp;</span> m<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// power of two</span>
            r <span class="token operator">&amp;=</span> m<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// reject over-represented candidates</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> r <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
                 u <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> u <span class="token operator">%</span> bound<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
                 u <span class="token operator">=</span> <span class="token function">mix32</span><span class="token punctuation">(</span><span class="token function">nextSeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u8FD4\u56DE [0, 1) \u968F\u673A int \u503C --&gt; \u91CD\u5199 Random \u65B9\u6CD5</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">mix32</span><span class="token punctuation">(</span><span class="token function">nextSeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">mix64</span><span class="token punctuation">(</span><span class="token function">nextSeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ThreadLocalRandom \u72EC\u6709</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token keyword">double</span> bound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bound <span class="token operator">&gt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">BadBound</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">mix64</span><span class="token punctuation">(</span><span class="token function">nextSeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">*</span> DOUBLE_UNIT <span class="token operator">*</span> bound<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> bound<span class="token punctuation">)</span> <span class="token operator">?</span>  result <span class="token operator">:</span> <span class="token comment">// correct for rounding</span>
            <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">longBitsToDouble</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span>bound<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">mix32</span><span class="token punctuation">(</span><span class="token function">nextSeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">*</span> FLOAT_UNIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">mix32</span><span class="token punctuation">(</span><span class="token function">nextSeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-random" tabindex="-1"><a class="header-anchor" href="#_3-random" aria-hidden="true">#</a> 3. Random</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Random</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u79CD\u5B50\u503C</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> seed<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> multiplier <span class="token operator">=</span> <span class="token number">0</span>x5DEECE66DL<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token comment">// \u6784\u9020\u51FD\u6570 - \u79CD\u5B50\u521D\u59CB\u503C\u4E0E \u67D0\u4E2A\u56FA\u5B9A\u503C &amp; \u5F53\u524D\u65F6\u95F4 \u6709\u5173</span>
    <span class="token keyword">public</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token function">seedUniquifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6784\u9020\u51FD\u6570 - \u6307\u5B9A seed \u521D\u59CB\u503C</span>
    <span class="token keyword">public</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Random</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token function">initialScramble</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setSeed</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u751F\u6210 seed -- \u56FA\u5B9A\u503C</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">seedUniquifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> current <span class="token operator">=</span> seedUniquifier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> next <span class="token operator">=</span> current <span class="token operator">*</span> <span class="token number">181783497276652981L</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>seedUniquifier<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7528\u4E8E \u521D\u59CB\u5316 \u65F6\uFF0C\u751F\u6210 seed \u7684\u4E00\u90E8\u5206 --&gt; \u56FA\u5B9A\u503C</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> seedUniquifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">8682522807148012L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u6839\u636E\u6307\u5B9A seed \u521D\u59CB\u503C\u751F\u6210 \u6EE1\u8DB3\u6761\u4EF6\u7684 seed</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">initialScramble</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>seed <span class="token operator">^</span> multiplier<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u6839\u636E\u6307\u5B9A seed \u751F\u6210 \u968F\u673A\u751F\u6210\u5668\u7684 seed</span>
    <span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>seed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">initialScramble</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        haveNextNextGaussian <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// -------------- \u516C\u5F00\u65B9\u6CD5 -----------------------</span>
    <span class="token comment">//</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> bound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bound <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">BadBound</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> bound <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bound <span class="token operator">&amp;</span> m<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// i.e., bound is a power of 2</span>
            r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bound <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> r<span class="token punctuation">;</span>
                 u <span class="token operator">-</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> u <span class="token operator">%</span> bound<span class="token punctuation">)</span> <span class="token operator">+</span> m <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
                 u <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">27</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> DOUBLE_UNIT<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u751F\u4EA7\u4E0B\u4E00\u4E2A\u968F\u673A\u6570 -- \u53EF\u4EE5\u770B\u5230\u4F7F\u7528 CAS \u4FDD\u8BC1\u6BCF\u6B21\u53EA\u6709\u4E00\u4E2A\u7EBF\u7A0B\u80FD\u591F\u6210\u529F\u8FDB\u5165\uFF0C\u5176\u4ED6\u7EBF\u7A0B\u53EA\u80FD\u65E0\u9650\u5931\u8D25\u91CD\u8BD5</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span> bits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> oldseed<span class="token punctuation">,</span> nextseed<span class="token punctuation">;</span>
        <span class="token class-name">AtomicLong</span> seed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>seed<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            oldseed <span class="token operator">=</span> seed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            nextseed <span class="token operator">=</span> <span class="token punctuation">(</span>oldseed <span class="token operator">*</span> multiplier <span class="token operator">+</span> addend<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>seed<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>oldseed<span class="token punctuation">,</span> nextseed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>nextseed <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">-</span> bits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[e];function c(l,i){return s(),a("div",null,o)}var r=n(t,[["render",c],["__file","rand.html.vue"]]);export{r as default};
