import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.5aebcaaa.js";const e={},t=p(`<h1 id="ziplist" tabindex="-1"><a class="header-anchor" href="#ziplist" aria-hidden="true">#</a> \u{1F33C} zipList</h1><ul><li><code>list</code> &amp; <code>hash</code> &amp; <code>zset</code> \u6570\u636E\u91CF\u8F83\u5C11\u65F6\u7684 \u5E95\u5C42\u6570\u636E\u7ED3\u6784</li><li><code>hash</code><ul><li><code>hash-max-ziplist-entries 512</code><ul><li>\u5F53 KV \u5BF9\u8282\u70B9\u6570 &gt; 512 \u5BF9\u65F6\uFF0C\u8F6C\u6362\u4E3A dict</li></ul></li><li><code>hash-max-ziplist-value 64</code><ul><li>\u5F53 val \u957F\u5EA6 &gt; 64 \u5B57\u8282\u65F6\uFF0C\u8F6C\u6362\u4E3A dict</li></ul></li></ul></li></ul><ol><li><strong>\u5B58\u50A8\u5F62\u5F0F</strong>\uFF1A <ul><li>ziplist: <ul><li><code>&lt;zlbytes&gt; &lt;zltail&gt; &lt;zllen&gt; &lt;entry&gt; &lt;entry&gt; ... &lt;entry&gt; &lt;zlend&gt;</code></li></ul></li><li>entry: <ul><li><code>&lt;prevlen&gt; &lt;len&gt; &lt;entry-data&gt;</code></li></ul></li></ul></li><li><strong>\u4E3E\u4F8B</strong>:</li></ol><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token punctuation">[</span><span class="token number">0f</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span>c <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">02</span> <span class="token number">00</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">00</span> f3<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">02</span> f6<span class="token punctuation">]</span> <span class="token punctuation">[</span>ff<span class="token punctuation">]</span>
      <span class="token operator">|</span>             <span class="token operator">|</span>          <span class="token operator">|</span>       <span class="token operator">|</span>       <span class="token operator">|</span>     <span class="token operator">|</span>
   zlbytes        zltail    entries   <span class="token string">&quot;2&quot;</span>     <span class="token string">&quot;5&quot;</span>   end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u6574\u4E2A <code>ziplist</code> \u7531\u4EE5\u4E0B\u4E00\u4E2A\u90E8\u5206\u7EC4\u6210\uFF08<strong>\u5C0F\u7AEF\u5B58\u50A8</strong>\uFF09\uFF1A</li><li><code>zlbytes</code><ul><li>\u6574\u4E2A <code>ziplist</code> \u5360\u7528\u7684\u5185\u5B58 <strong>\u5B57\u8282\u6570</strong></li><li>\u4F8B\u4E2D = 15</li></ul></li><li><code>zltail</code><ul><li><code>ziplist</code> \u5C3E\u90E8\u8282\u70B9 \u8DDD\u79BB\u9996\u5B57\u8282\u7684 <strong>\u504F\u79FB\u5B57\u8282\u6570</strong></li><li>\u4F8B\u4E2D = 12\uFF0C\u5373\u9996\u5B57\u8282 <code>0f</code> \u4E0E\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u9996\u5B57\u8282 <code>02</code> \u4E4B\u95F4\u7684\u8DDD\u79BB</li></ul></li><li><code>zllen</code><ul><li>\u538B\u7F29\u5217\u8868 <strong>\u8282\u70B9\u6570</strong></li><li>\u4F8B\u4E2D = 2\uFF0C\u8868\u793A\u6709 2 \u4E2A <code>entry</code> \u8282\u70B9</li><li>16 \u4F4D\u6700\u591A\u53EF\u4EE5\u8868\u793A <code>2^16-1</code> \u4E2A\u8282\u70B9\uFF0C\u5F53\u8282\u70B9\u6570 <code>&gt; 2^16-2</code> \u65F6\uFF0C\u4E5F\u53EF\u4EE5\u7EE7\u7EED\u5B58\u50A8\uFF0C\u53EA\u662F\u8FD9\u6837\u8BA1\u7B97 \u8282\u70B9\u6570\u65F6\uFF0C\u9700\u8981\u904D\u5386 ziplist</li></ul></li><li><code>entry</code><ul><li>\u5B58\u653E\u5B9E\u9645\u6570\u636E\u7684\u8282\u70B9\uFF0C\u6BCF\u4E2A entry \u6709\u81EA\u5DF1\u7684\u5185\u90E8\u7ED3\u6784</li><li>\u5BB9\u6613\u5F15\u53D1 <strong>\u8FDE\u9501\u53CD\u5E94</strong><ul><li>\u80CC\u666F\uFF1A\u6BCF\u4E2A entry \u90FD\u4F1A\u7528 <code>1 | 5</code> \u4E2A\u5B57\u8282\u6765\u8BB0\u5F55\u524D\u4E00\u4E2A\u8282\u70B9\u7684\u957F\u5EA6</li><li>\u53D1\u751F\u6761\u4EF6\uFF1A\u5728\u4E00\u4E2A 1 \u5B57\u8282\u8BB0\u5F55\u524D\u4E00\u4E2A\u8282\u70B9\u957F\u5EA6\u7684 entry \u524D\uFF0C\u63D2\u5165\u4E00\u4E2A \u5927\u4E8E\u7B49\u4E8E 254 \u5B57\u8282\u7684 entry\uFF0C\u5BFC\u81F4\u8BE5\u8282\u70B9\u9700\u8981\u591A\u589E 4 \u5B57\u8282\u7684\u7A7A\u95F4\uFF0C <ul><li>\u82E5\u540C\u65F6\uFF0C\u8BE5\u8282\u70B9\u589E\u52A0 4 \u8282\u70B9\u540E\uFF0C\u7531 \u5C0F\u4E8E 254 \u5B57\u8282\u7684\u957F\u5EA6 --&gt; \u5927\u4E8E\u7B49\u4E8E 254 \u5B57\u8282\uFF0C\u5219\u4F1A\u89E6\u53D1\u518D\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u5185\u5B58\u6269\u5C55\u5DE5\u4F5C</li><li>\u8FDB\u800C\u5F71\u54CD\u6027\u80FD</li></ul></li></ul></li></ul></li><li><code>zlend</code><ul><li><code>ziplist</code> \u7684\u7ED3\u675F\u70B9\uFF0C\u6052\u4E3A <code>0xff</code></li></ul></li></ul><ol start="3"><li><strong>entry \u8BE6\u89E3</strong><ul><li><code>&lt;prevlen&gt; &lt;len&gt; &lt;entry-data&gt;</code></li><li><code>prevlen</code><ul><li>\u82E5 <code>prevlen &lt; 254 Bytes</code> : <code>1</code> \u5B57\u8282\u8BB0\u5F55</li><li>\u82E5 <code>prevlen &gt;= 254 Bytes</code> : <code>5</code> \u5B57\u8282\u8BB0\u5F55 : \u524D\u4E00\u4E2A\u5B57\u8282 === 254\uFF08\u907F\u514D\u548C <code>zlend</code> \u7684 255 \u51B2\u7A81\uFF09 + \u540E 4 \u5B57\u8282\u7684\u5B9E\u9645\u957F\u5EA6</li></ul></li><li><code>len</code><ul><li>\u6839\u636E\u7B2C\u4E00\u4E2A\u5B57\u8282\u7684\u4E0D\u540C\uFF0C\u5206\u4E3A\u4EE5\u4E0B\u51E0\u79CD\u60C5\u51B5\uFF1A <ul><li>00xx xxxx</li><li>01xx xxxx</li><li>10xx xxxx</li><li>1100 0000: entry-data \u4E3A 2 \u5B57\u8282\u7684 int16_t \u7C7B\u578B</li><li>1101 0000: entry-data \u4E3A 4 \u5B57\u8282\u7684 int32_t \u7C7B\u578B</li><li>1110 0000: entry-data \u4E3A 8 \u5B57\u8282\u7684 int64_t \u7C7B\u578B</li><li>1111 0000: entry-data \u4E3A 3 \u5B57\u8282\u957F\u7684 \u6574\u6570</li><li>1111 1110: entry-data \u4E3A 1 \u5B57\u8282\u957F\u7684 \u6574\u6570</li><li>1111 xxxx: xxxx \u5C31\u662F entry-data \u7684\u5B9E\u9645\u503C\uFF0C\u533A\u95F4\u8303\u56F4\u4E3A <code>[0001, 1101]</code>\uFF0C\u5BF9\u5E94\u5B9E\u9645\u503C\u4E3A <code>[0, 12]</code>\uFF0C\u800C\u975E [1, 13]\uFF0C\u65E0\u9700\u989D\u5916\u7684 entry-data</li></ul></li></ul></li><li><code>entry-data</code></li><li>\u4F8B\u4E2D\uFF1A <ul><li><code>[00 f3]</code><ul><li>00 \u8868\u793A prevlen == 0 \u4E3A\u9996\u8282\u70B9\uFF0Cf3 \u8868\u793A entry-data \u5B9E\u9645\u503C\u4E3A 3 - 1 = 2</li></ul></li><li><code>[02 f6]</code><ul><li>02 \u8868\u793A prevlen == 2\uFF0Cf6 \u8868\u793A entry-data \u5B9E\u9645\u503C\u4E3A 6 - 1 = 5</li></ul></li></ul></li></ul></li><li><strong>\u7279\u70B9</strong><ul><li>\u901A\u8FC7 <code>zltail</code> \u53EF\u5FEB\u901F\u5B9A\u4F4D\u5230 \u6700\u540E\u4E00\u4E2A\u5143\u7D20\u6240\u5728\u4F4D\u7F6E\uFF0C\u590D\u6742\u5EA6\u4E3A <code>O(1)</code>\uFF0C\u5176\u4ED6\u8282\u70B9\u590D\u6742\u5EA6\u4E3A O(N)</li><li>\u7D27\u51D1\u6A21\u5F0F\uFF0C<strong>\u8282\u7701\u5185\u5B58</strong>\uFF0C\u9002\u7528\u4E8E <strong>\u8282\u70B9\u6570\u91CF\u8F83\u5C11\u65F6</strong> \u7684\u60C5\u51B5</li></ul></li></ol><h2 id="_1-\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_1-\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> 1. \u6570\u636E\u7ED3\u6784</h2><ul><li><code>ziplist</code> \u6CA1\u6709\u81EA\u5B9A\u4E49 <code>struct</code> \u4E4B\u7C7B\u6765\u8868\u8FBE\uFF0C\u800C\u662F\u4F7F\u7528 <code>unsigned char *</code> \u8868\u793A <ul><li>\u539F\u56E0\u5728\u4E8E ziplist \u672C\u8D28\u4E0A\u5C31\u662F\u4E00\u5757\u8FDE\u7EED\u5185\u5B58\uFF0C\u5185\u90E8\u7EC4\u6210\u53C8\u662F <mark>\u9AD8\u5EA6\u52A8\u6001</mark> \u7684\u8BBE\u8BA1\uFF0C\u56E0\u6B64\u65E0\u6CD5\u901A\u8FC7\u4E00\u4E2A\u56FA\u5B9A\u7684\u6570\u636E\u7ED3\u6784\u6765\u8868\u793A</li></ul></li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* ziplist \u6570\u636E\u7ED3\u6784\uFF0C\u8981\u4E48\u5B58\u653E string \u8981\u4E48\u5B58\u653E integer */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>sval<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> slen<span class="token punctuation">;</span> <span class="token comment">/* When string is used, it is provided with the length (slen). */</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> lval<span class="token punctuation">;</span> <span class="token comment">/* When integer is used, &#39;sval&#39; is NULL, and lval holds the value. */</span>
<span class="token punctuation">}</span> ziplistEntry<span class="token punctuation">;</span>


<span class="token comment">/* entry \u62BD\u8C61\u6570\u636E\u7ED3\u6784 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zlentry</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prevrawlensize<span class="token punctuation">;</span> <span class="token comment">/* Bytes used to encode the previous entry len*/</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prevrawlen<span class="token punctuation">;</span>     <span class="token comment">/* \u524D\u4E00\u4E2A\u8282\u70B9\u7684\u957F\u5EA6 - \u5F53\u5C0F\u4E8E 254 \u5B57\u8282\u65F6\uFF0C\u7528 1 \u4E2A\u5B57\u8282\u8BB0\u5F55\u957F\u5EA6\uFF1B\u5F53\u5927\u4E8E\u7B49\u4E8E 254 \u5B57\u8282\u65F6\uFF0C\u7528 5 \u4E2A\u5B57\u8282\u8BB0\u5F55\u957F\u5EA6 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> lensize<span class="token punctuation">;</span>        <span class="token comment">/* entry \u7F16\u7801\u957F\u5EA6*/</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token comment">/* entry \u5B9E\u9645\u957F\u5EA6\uFF0C\u5B57\u8282 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> headersize<span class="token punctuation">;</span>     <span class="token comment">/* prevrawlensize + lensize. */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> encoding<span class="token punctuation">;</span>      <span class="token comment">/* \u7F16\u7801\u65B9\u5F0F */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>            <span class="token comment">/* \u6570\u636E\u6307\u9488 */</span>
<span class="token punctuation">}</span> zlentry<span class="token punctuation">;</span>

<span class="token comment">/* entry \u6570\u636E\u7ED3\u6784 */</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">zipEntry</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> zlentry <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ZIP_DECODE_PREVLEN</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> e<span class="token operator">-&gt;</span>prevrawlensize<span class="token punctuation">,</span> e<span class="token operator">-&gt;</span>prevrawlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u524D\u4E00\u4E2A\u8282\u70B9\u7684\u957F\u5EA6</span>
    <span class="token function">ZIP_ENTRY_ENCODING</span><span class="token punctuation">(</span>p <span class="token operator">+</span> e<span class="token operator">-&gt;</span>prevrawlensize<span class="token punctuation">,</span> e<span class="token operator">-&gt;</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u7F16\u7801\u957F\u5EA6</span>
    <span class="token function">ZIP_DECODE_LENGTH</span><span class="token punctuation">(</span>p <span class="token operator">+</span> e<span class="token operator">-&gt;</span>prevrawlensize<span class="token punctuation">,</span> e<span class="token operator">-&gt;</span>encoding<span class="token punctuation">,</span> e<span class="token operator">-&gt;</span>lensize<span class="token punctuation">,</span> e<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5B9E\u9645\u6570\u636E\u957F\u5EA6</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>e<span class="token operator">-&gt;</span>lensize <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* check that encoding was valid. */</span>
    e<span class="token operator">-&gt;</span>headersize <span class="token operator">=</span> e<span class="token operator">-&gt;</span>prevrawlensize <span class="token operator">+</span> e<span class="token operator">-&gt;</span>lensize<span class="token punctuation">;</span>
    e<span class="token operator">-&gt;</span>p <span class="token operator">=</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-\u521B\u5EFA" tabindex="-1"><a class="header-anchor" href="#_2-\u521B\u5EFA" aria-hidden="true">#</a> 2. \u521B\u5EFA</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* Create a new empty ziplist. */</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistNew</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> bytes <span class="token operator">=</span> ZIPLIST_HEADER_SIZE<span class="token operator">+</span>ZIPLIST_END_SIZE<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl <span class="token operator">=</span> <span class="token function">zmalloc</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ZIPLIST_BYTES</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span>ZIPLIST_HEADER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ZIPLIST_LENGTH</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    zl<span class="token punctuation">[</span>bytes<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ZIP_END<span class="token punctuation">;</span>
    <span class="token keyword">return</span> zl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-\u5E38\u7528\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#_3-\u5E38\u7528\u65B9\u6CD5" aria-hidden="true">#</a> 3. \u5E38\u7528\u65B9\u6CD5</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// \u524D\u4E00\u4E2A\u8282\u70B9\u957F\u5EA6\u6240\u5360\u5F53\u524D entry \u7684\u5B57\u8282\u6570</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ZIP_BIG_PREVLEN</span> <span class="token expression"><span class="token number">254</span> </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ZIP_DECODE_PREVLENSIZE</span><span class="token expression"><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> prevlensize<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>                          </span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> ZIP_BIG_PREVLEN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                          
        <span class="token punctuation">(</span>prevlensize<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                     
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                                                   
        <span class="token punctuation">(</span>prevlensize<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                                                     
    <span class="token punctuation">}</span>                                                                          
<span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u65B9\u6CD5\u6982\u89C8" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5\u6982\u89C8" aria-hidden="true">#</a> \u65B9\u6CD5\u6982\u89C8</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// \u521B\u5EFA\u4E00\u4E2A\u7A7A\u7684 ziplist\uFF0C\u53EA\u5305\u542B &lt;zlbytes&gt; &lt;zltail&gt; &lt;zllen&gt; &lt;zlend&gt;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistNew</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u5C06\u4E24\u6761 ziplist \u5408\u5E76\u4E3A\u4E00\u4E2A\u65B0\u7684 ziplist</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistMerge</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>first<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u5728 ziplist \u7684\u5934\u90E8 | \u5C3E\u90E8 \u63D2\u5165\u6570\u636E\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684 ziplist</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistPush</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> slen<span class="token punctuation">,</span> <span class="token keyword">int</span> where<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u8FD4\u56DE index \u5904\u7684\u6570\u636E\u9879\u7684 \u5185\u5B58\u5730\u5740</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistIndex</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u8FD4\u56DE ziplist \u6307\u5B9A\u9879 p \u7684\u540E\u4E00\u9879</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistNext</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u8FD4\u56DE ziplist \u6307\u5B9A\u9879 p \u7684\u524D\u4E00\u9879</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistPrev</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">ziplistGet</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>sval<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>slen<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>lval<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u5728\u6570\u636E\u9879 p \u7684\u524D\u9762\u63D2\u5165 s</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistInsert</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> slen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u5220\u9664\u6307\u5B9A\u6570\u636E\u9879</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistDelete</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u5220\u9664\u6307\u5B9A\u533A\u95F4\u8282\u70B9</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistDeleteRange</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u66FF\u6362\u6307\u5B9A\u6570\u636E\u9879</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistReplace</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> slen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u4E24\u6761 ziplist \u6BD4\u8F83</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">ziplistCompare</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> slen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u67E5\u627E\u7ED9\u5B9A\u6570\u636E\uFF0Cskip \u8868\u793A\u6BCF\u6B21\u67E5\u627E\u8981\u8DF3\u8FC7\u7684\u6570\u636E\u9879\uFF0C\u7528\u4E8E\u5947\u6570\u5B58 key\uFF0C\u5076\u6570\u5B58 val \u7684\u60C5\u51B5</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ziplistFind</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>vstr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> vlen<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> skip<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">ziplistLen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">size_t</span> <span class="token function">ziplistBlobLen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ziplistRepr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>ziplistValidateEntryCB<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> head_count<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> userdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">ziplistValidateIntegrity</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> deep<span class="token punctuation">,</span> ziplistValidateEntryCB entry_cb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>cb_userdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ziplistRandomPair</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> total_count<span class="token punctuation">,</span> ziplistEntry <span class="token operator">*</span>key<span class="token punctuation">,</span> ziplistEntry <span class="token operator">*</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ziplistRandomPairs</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> ziplistEntry <span class="token operator">*</span>keys<span class="token punctuation">,</span> ziplistEntry <span class="token operator">*</span>vals<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">ziplistRandomPairsUnique</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> ziplistEntry <span class="token operator">*</span>keys<span class="token punctuation">,</span> ziplistEntry <span class="token operator">*</span>vals<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">ziplistSafeToAdd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> zl<span class="token punctuation">,</span> <span class="token class-name">size_t</span> add<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-\u5220\u9664\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#_1-\u5220\u9664\u8282\u70B9" aria-hidden="true">#</a> 1) \u5220\u9664\u8282\u70B9</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* Delete &quot;num&quot; entries, starting at &quot;p&quot;. Returns pointer to the ziplist. */</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">__ziplistDelete</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> totlen<span class="token punctuation">,</span> deleted <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> offset<span class="token punctuation">;</span>
    <span class="token keyword">int</span> nextdiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    zlentry first<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> zlbytes <span class="token operator">=</span> <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">ZIPLIST_BYTES</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">zipEntry</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* no need for &quot;safe&quot; variant since the input pointer was validated by the function that returned it. */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        p <span class="token operator">+=</span> <span class="token function">zipRawEntryLengthSafe</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> zlbytes<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        deleted<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">assert</span><span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> first<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    totlen <span class="token operator">=</span> p<span class="token operator">-</span>first<span class="token punctuation">.</span>p<span class="token punctuation">;</span> <span class="token comment">/* Bytes taken by the element(s) to delete. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>totlen <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">uint32_t</span> set_tail<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/* Storing \`prevrawlen\` in this entry may increase or decrease the
             * number of bytes required compare to the current \`prevrawlen\`.
             * There always is room to store this, because it was previously
             * stored by an entry that is now being deleted. */</span>
            nextdiff <span class="token operator">=</span> <span class="token function">zipPrevLenByteDiff</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>first<span class="token punctuation">.</span>prevrawlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">/* Note that there is always space when p jumps backward: if
             * the new previous entry is large, one of the deleted elements
             * had a 5 bytes prevlen header, so there is for sure at least
             * 5 bytes free and we need just 4. */</span>
            p <span class="token operator">-=</span> nextdiff<span class="token punctuation">;</span>
            <span class="token function">assert</span><span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> first<span class="token punctuation">.</span>p <span class="token operator">&amp;&amp;</span> p<span class="token operator">&lt;</span>zl<span class="token operator">+</span>zlbytes<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">zipStorePrevEntryLength</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>first<span class="token punctuation">.</span>prevrawlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">/* Update offset for tail */</span>
            set_tail <span class="token operator">=</span> <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>totlen<span class="token punctuation">;</span>

            <span class="token comment">/* When the tail contains more than one entry, we need to take
             * &quot;nextdiff&quot; in account as well. Otherwise, a change in the
             * size of prevlen doesn&#39;t have an effect on the *tail* offset. */</span>
            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">zipEntrySafe</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> zlbytes<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tail<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>tail<span class="token punctuation">.</span>headersize<span class="token operator">+</span>tail<span class="token punctuation">.</span>len<span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                set_tail <span class="token operator">=</span> set_tail <span class="token operator">+</span> nextdiff<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">/* Move tail to the front of the ziplist */</span>
            <span class="token comment">/* since we asserted that p &gt;= first.p. we know totlen &gt;= 0,
             * so we know that p &gt; first.p and this is guaranteed not to reach
             * beyond the allocation, even if the entries lens are corrupted. */</span>
            <span class="token class-name">size_t</span> bytes_to_move <span class="token operator">=</span> zlbytes<span class="token operator">-</span><span class="token punctuation">(</span>p<span class="token operator">-</span>zl<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token function">memmove</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span>p<span class="token punctuation">,</span>p<span class="token punctuation">,</span>bytes_to_move<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">/* The entire tail was deleted. No need to move memory. */</span>
            set_tail <span class="token operator">=</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>p<span class="token operator">-</span>zl<span class="token punctuation">)</span><span class="token operator">-</span>first<span class="token punctuation">.</span>prevrawlen<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">/* Resize the ziplist */</span>
        offset <span class="token operator">=</span> first<span class="token punctuation">.</span>p<span class="token operator">-</span>zl<span class="token punctuation">;</span>
        zlbytes <span class="token operator">-=</span> totlen <span class="token operator">-</span> nextdiff<span class="token punctuation">;</span>
        zl <span class="token operator">=</span> <span class="token function">ziplistResize</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> zlbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> zl<span class="token operator">+</span>offset<span class="token punctuation">;</span>

        <span class="token comment">/* Update record count */</span>
        <span class="token function">ZIPLIST_INCR_LENGTH</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span><span class="token operator">-</span>deleted<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* Set the tail offset computed above */</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>set_tail <span class="token operator">&lt;=</span> zlbytes <span class="token operator">-</span> ZIPLIST_END_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span>set_tail<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* When nextdiff != 0, the raw length of the next entry has changed, so
         * we need to cascade the update throughout the ziplist */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextdiff <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            zl <span class="token operator">=</span> <span class="token function">__ziplistCascadeUpdate</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> zl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-\u63D2\u5165\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#_2-\u63D2\u5165\u8282\u70B9" aria-hidden="true">#</a> 2\uFF09 \u63D2\u5165\u8282\u70B9</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* \u5728 p \u4F4D\u7F6E\u524D\u63D2\u5165\u4E00\u6BB5\u65B0\u6570\u636E\uFF0C\u5F85\u63D2\u5165\u65B0\u6570\u636E\u7684\u5730\u5740\u6307\u9488\u4E3A s\uFF0C\u957F\u5EA6\u4E3A slen */</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">__ziplistInsert</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>zl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> slen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> curlen <span class="token operator">=</span> <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">ZIPLIST_BYTES</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reqlen<span class="token punctuation">,</span> newlen<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> prevlensize<span class="token punctuation">,</span> prevlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> offset<span class="token punctuation">;</span>
    <span class="token keyword">int</span> nextdiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> encoding <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token number">123456789</span><span class="token punctuation">;</span> <span class="token comment">/* initialized to avoid warning. Using a value
                                    that is easy to see if for some reason
                                    we use it uninitialized. */</span>
    zlentry tail<span class="token punctuation">;</span>

    <span class="token comment">/* \u8BB0\u5F55 p.prevlen\uFF0C\u4F5C\u4E3A s.prevlen */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ZIP_DECODE_PREVLEN</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> prevlensize<span class="token punctuation">,</span> prevlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptail <span class="token operator">=</span> <span class="token function">ZIPLIST_ENTRY_TAIL</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptail<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prevlen <span class="token operator">=</span> <span class="token function">zipRawEntryLengthSafe</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> curlen<span class="token punctuation">,</span> ptail<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* \u5224\u65AD \u7F16\u7801\u65B9\u5F0F \u662F\u5426\u9700\u8981\u4FEE\u6539 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">zipTryEncoding</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>slen<span class="token punctuation">,</span><span class="token operator">&amp;</span>value<span class="token punctuation">,</span><span class="token operator">&amp;</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* &#39;encoding&#39; is set to the appropriate integer encoding */</span>
        reqlen <span class="token operator">=</span> <span class="token function">zipIntSize</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">/* &#39;encoding&#39; is untouched, however zipStoreEntryEncoding will use the
         * string length to figure out how to encode it. */</span>
        reqlen <span class="token operator">=</span> slen<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* \u8BA1\u7B97 \u5F85\u63D2\u5165\u6570\u636E\u5982\u679C\u6B63\u5E38\u63D2\u5165\u9700\u8981\u7684 \u5B57\u8282\u6570\uFF0C\u5305\u542B p.prevlen \u548C encode \u7B49\u7684\u6539\u53D8\u9020\u6210\u5B57\u8282\u957F\u5EA6\u7684\u53D8\u5316 */</span>
    reqlen <span class="token operator">+=</span> <span class="token function">zipStorePrevEntryLength</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span>prevlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqlen <span class="token operator">+=</span> <span class="token function">zipStoreEntryEncoding</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span>encoding<span class="token punctuation">,</span>slen<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* \u8BA1\u7B97 \u5F85\u63D2\u5165\u6570\u636E \u5BF9\u6E90\u6570\u636E\u957F\u5EA6\u5E26\u6765\u7684\u6539\u53D8 */</span>
    <span class="token keyword">int</span> forcelarge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    nextdiff <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">zipPrevLenByteDiff</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>reqlen<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextdiff <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> reqlen <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nextdiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        forcelarge <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* \u8BA1\u7B97\u65B0\u7684 ziplist \u7684\u5B57\u8282\u6570\uFF0C\u91CD\u65B0\u8C03\u6574\u5927\u5C0F\u5206\u914D\u5185\u5B58 */</span>
    offset <span class="token operator">=</span> p<span class="token operator">-</span>zl<span class="token punctuation">;</span>
    newlen <span class="token operator">=</span> curlen<span class="token operator">+</span>reqlen<span class="token operator">+</span>nextdiff<span class="token punctuation">;</span>
    zl <span class="token operator">=</span> <span class="token function">ziplistResize</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span>newlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> zl<span class="token operator">+</span>offset<span class="token punctuation">;</span>

    <span class="token comment">/* \u5C06 p \u6570\u636E\u5411\u540E\u79FB\u52A8 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* Subtract one because of the ZIP_END bytes */</span>
        <span class="token function">memmove</span><span class="token punctuation">(</span>p<span class="token operator">+</span>reqlen<span class="token punctuation">,</span>p<span class="token operator">-</span>nextdiff<span class="token punctuation">,</span>curlen<span class="token operator">-</span>offset<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>nextdiff<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* Encode this entry&#39;s raw length in the next entry. */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>forcelarge<span class="token punctuation">)</span>
            <span class="token function">zipStorePrevEntryLengthLarge</span><span class="token punctuation">(</span>p<span class="token operator">+</span>reqlen<span class="token punctuation">,</span>reqlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">zipStorePrevEntryLength</span><span class="token punctuation">(</span>p<span class="token operator">+</span>reqlen<span class="token punctuation">,</span>reqlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* Update offset for tail */</span>
        <span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span> <span class="token operator">=</span>
            <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>reqlen<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* When the tail contains more than one entry, we need to take
         * &quot;nextdiff&quot; in account as well. Otherwise, a change in the
         * size of prevlen doesn&#39;t have an effect on the *tail* offset. */</span>
        <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">zipEntrySafe</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span> newlen<span class="token punctuation">,</span> p<span class="token operator">+</span>reqlen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tail<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>reqlen<span class="token operator">+</span>tail<span class="token punctuation">.</span>headersize<span class="token operator">+</span>tail<span class="token punctuation">.</span>len<span class="token punctuation">]</span> <span class="token operator">!=</span> ZIP_END<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span> <span class="token operator">=</span>
                <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">intrev32ifbe</span><span class="token punctuation">(</span><span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>nextdiff<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">/* This element will be the new tail. */</span>
        <span class="token function">ZIPLIST_TAIL_OFFSET</span><span class="token punctuation">(</span>zl<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">intrev32ifbe</span><span class="token punctuation">(</span>p<span class="token operator">-</span>zl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* When nextdiff != 0, the raw length of the next entry has changed, so
     * we need to cascade the update throughout the ziplist */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextdiff <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        offset <span class="token operator">=</span> p<span class="token operator">-</span>zl<span class="token punctuation">;</span>
        zl <span class="token operator">=</span> <span class="token function">__ziplistCascadeUpdate</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span>p<span class="token operator">+</span>reqlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> zl<span class="token operator">+</span>offset<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Write the entry */</span>
    p <span class="token operator">+=</span> <span class="token function">zipStorePrevEntryLength</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>prevlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">+=</span> <span class="token function">zipStoreEntryEncoding</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>encoding<span class="token punctuation">,</span>slen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ZIP_IS_STR</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>s<span class="token punctuation">,</span>slen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">zipSaveInteger</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>value<span class="token punctuation">,</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">ZIPLIST_INCR_LENGTH</span><span class="token punctuation">(</span>zl<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> zl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[t];function c(l,i){return s(),a("div",null,o)}var k=n(e,[["render",c],["__file","ziplist.html.vue"]]);export{k as default};
