import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{r as p,o as e,c as o,a as n,b as c,d as s,e as l}from"./app.5aebcaaa.js";const i={},u=n("h1",{id:"dict",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dict","aria-hidden":"true"},"#"),s(" \u{1F338} dict")],-1),k=n("ul",null,[n("li",null,[n("code",null,"hash"),s(" & "),n("code",null,"set"),s(" \u7684\u5E95\u5C42\u6570\u636E\u7ED3\u6784")])],-1),r={href:"https://github.com/redis/redis/blob/7.0/src/dict.h",target:"_blank",rel:"noopener noreferrer"},d=s("\u5730\u5740"),v=l(`<ul><li><code>\u6DFB\u52A0</code>\u3001<code>\u5220\u9664</code>\u3001<code>\u67E5\u627E</code> \u8282\u70B9\u65F6\u4F1A\u8FDB\u884C \u6E10\u8FDB\u5F0F <code>rehash</code> \u64CD\u4F5C</li><li>hash \u51B2\u7A81\u65F6\uFF0C\u91C7\u7528 <code>\u62C9\u94FE\u6CD5</code>\uFF0C\u540C\u4E00\u4E0B\u6807\u4E0B\u7684\u67E5\u627E\u4E3A \u94FE\u8868\u7684\u67E5\u627E</li></ul><h2 id="_1-\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_1-\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> 1. \u6570\u636E\u7ED3\u6784</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 1.1 \u5B9A\u4E49 \u8282\u70B9\u7C7B\uFF0C\u5B58\u50A8\u5355\u4E2A\u8282\u70B9\u7684 k-v </span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span> <span class="token comment">// key</span>
    <span class="token keyword">union</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>
        <span class="token class-name">uint64_t</span> u64<span class="token punctuation">;</span>
        <span class="token class-name">int64_t</span> s64<span class="token punctuation">;</span>
        <span class="token keyword">double</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> v<span class="token punctuation">;</span> <span class="token comment">// val</span>
    <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>     <span class="token comment">// \u6570\u7EC4\u540C\u4E00\u4E0B\u6807\u4E0B\u7684\u4E0B\u4E00\u4E2A\u8282\u70B9</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>metadata<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">/* \u5141\u8BB8 \u989D\u5916\u653E\u4E00\u4E9B \u5143\u6570\u636E \u5230\u8282\u70B9\u4E2D */</span>
<span class="token punctuation">}</span> dictEntry<span class="token punctuation">;</span>

<span class="token comment">// 1.2 \u5B9A\u4E49 dictType \u7C7B\uFF0C\u5305\u542B\u82E5\u5E72\u51FD\u6570\u6307\u9488\uFF0C\u7528\u4E8E dict \u7684\u8C03\u7528\u8005\u5BF9 key-val \u7684\u5404\u79CD\u64CD\u4F5C\u8FDB\u884C\u81EA\u5B9A\u4E49</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictType</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1) \u5BF9 key \u8FDB\u884C hash \u503C\u8BA1\u7B97\u7684 hash \u7B97\u6CD5</span>
    <span class="token class-name">uint64_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>hashFunction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 2) \u5BF9 key \u7684\u62F7\u8D1D\u51FD\u6570\uFF0C\u7528\u4E8E\u9700\u8981\u65F6\u5BF9 key \u8FDB\u884C\u6DF1\u62F7\u8D1D\uFF0C\u800C\u4E0D\u4EC5\u4EC5\u662F\u4F20\u9012\u5BF9\u8C61\u6307\u9488</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>keyDup<span class="token punctuation">)</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3) \u5BF9 val \u7684\u62F7\u8D1D\u51FD\u6570\uFF0C\u7528\u4E8E\u9700\u8981\u65F6\u5BF9 val \u8FDB\u884C\u6DF1\u62F7\u8D1D\uFF0C\u800C\u4E0D\u4EC5\u4EC5\u662F\u4F20\u9012\u5BF9\u8C61\u6307\u9488</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>valDup<span class="token punctuation">)</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4) \u4E24\u4E2A key \u7684\u6BD4\u8F83\u64CD\u4F5C\uFF0C\u5728\u6839\u636E key \u8FDB\u884C\u67E5\u627E\u65F6\u4F1A\u88AB\u7528\u5230</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyCompare<span class="token punctuation">)</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 5) \u5BF9 key \u7684\u6790\u6784\u51FD\u6570</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyDestructor<span class="token punctuation">)</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 6) \u5BF9 val \u7684\u6790\u6784\u51FD\u6570</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>valDestructor<span class="token punctuation">)</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 7) </span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>expandAllowed<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> moreMem<span class="token punctuation">,</span> <span class="token keyword">double</span> usedRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 8) \u5141\u8BB8 dictEntry \u8282\u70B9\u7C7B\u643A\u5E26\u989D\u5916 \u88AB\u8C03\u7528\u8005\u58F0\u660E\u7684\u5143\u6570\u636E\uFF0C\u5F53 \u8282\u70B9\u7C7B\u521D\u59CB\u5316\u65F6\uFF0C\u88AB\u8D4B\u503C\u4E3A 0</span>
    <span class="token class-name">size_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dictEntryMetadataBytes<span class="token punctuation">)</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictType<span class="token punctuation">;</span>

<span class="token comment">// 1.3 \u5B9A\u4E49 dict \u7C7B</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> dict<span class="token punctuation">;</span>

<span class="token comment">// 2. \u5B9A\u4E49 dict \u7ED3\u6784</span>
<span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">{</span>
    dictType <span class="token operator">*</span>type<span class="token punctuation">;</span> <span class="token comment">// \u6307\u5411 dictType \u7C7B\uFF0C\u91CC\u9762\u6709\u4E00\u4E9B\u65B9\u6CD5\u53EF\u4EE5\u8C03\u7528</span>

    <span class="token comment">// 2 \u4E2A hash \u8868\u3002\u5728\u91CD hash \u7684\u8FC7\u7A0B\u4E2D\uFF0C\u589E\u91CF\u66F4\u65B0\uFF1B\u5E73\u65F6\u60C5\u51B5\u4E0B\uFF0Cht_table[0] \u6709\u6548\uFF0Cht_table[1] \u4E3A\u7A7A</span>
    dictEntry <span class="token operator">*</span><span class="token operator">*</span>ht_table<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
    <span class="token comment">// \u8BB0\u5F55 \u6BCF\u4E2A hash \u8868\u4E2D\u73B0\u6709\u8282\u70B9\u6570</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ht_used<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// \u91CD hash \u8FC7\u7A0B\u4E2D\uFF0C\u5F53\u524D\u8FDB\u884C\u5230\u7684\u4E0B\u6807\uFF1B\u82E5\u5426\uFF0C\u5219\u4E3A -1</span>
    <span class="token keyword">long</span> rehashidx<span class="token punctuation">;</span> 

    <span class="token comment">// \u82E5 &gt; 0 \u8BF4\u660E \u91CD hash \u8FC7\u7A0B \u88AB\u6682\u505C\uFF1B\u82E5 &lt; 0 \u8BF4\u660E\u51FA\u73B0\u9519\u8BEF\uFF1B\u6B63\u5E38\u60C5\u51B5\u4E0B\u5E94\u8BE5 == 0</span>
    <span class="token class-name">int16_t</span> pauserehash<span class="token punctuation">;</span> 
    <span class="token comment">// size = 1&lt;&lt;exp \u6240\u4EE5 exp \u8868\u793A 1 \u5DE6\u79FB\u591A\u5C11\u4F4D\u540E\u4E3A \u5F53\u524D\u6570\u7EC4\u957F\u5EA6</span>
    <span class="token keyword">signed</span> <span class="token keyword">char</span> ht_size_exp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

 <span class="token comment">// \u82E5 safe == 1 \u8868\u793A \u8FED\u4EE3\u5668\u662F\u7EBF\u7A0B\u5B89\u5168\u7684\uFF0C\u6B64\u65F6\u904D\u5386\u65F6\uFF0C\u53EF\u4EE5\u8C03\u7528 dictAdd, dictFind, and other functions</span>
 <span class="token comment">// \u5426\u5219\uFF0C\u8FED\u4EE3\u5668\u975E\u7EBF\u7A0B\u5B89\u5168\uFF0C\u904D\u5386\u65F6\uFF0C\u53EA\u80FD\u8C03\u7528 dictNext()</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictIterator</span> <span class="token punctuation">{</span>
    dict <span class="token operator">*</span>d<span class="token punctuation">;</span>
    <span class="token keyword">long</span> index<span class="token punctuation">;</span>
    <span class="token keyword">int</span> table<span class="token punctuation">,</span> safe<span class="token punctuation">;</span>
    dictEntry <span class="token operator">*</span>entry<span class="token punctuation">,</span> <span class="token operator">*</span>nextEntry<span class="token punctuation">;</span>
    <span class="token comment">/* unsafe iterator fingerprint for misuse detection. */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> fingerprint<span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictIterator<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-\u521B\u5EFA" tabindex="-1"><a class="header-anchor" href="#_2-\u521B\u5EFA" aria-hidden="true">#</a> 2. \u521B\u5EFA</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* Create a new hash table */</span>
dict <span class="token operator">*</span><span class="token function">dictCreate</span><span class="token punctuation">(</span>dictType <span class="token operator">*</span>type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dict <span class="token operator">*</span>d <span class="token operator">=</span> <span class="token function">zmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5206\u914D\u7A7A\u95F4</span>

    <span class="token function">_dictInit</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8D4B\u521D\u503C</span>
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* \u521D\u59CB\u5316 */</span>
<span class="token keyword">int</span> <span class="token function">_dictInit</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> dictType <span class="token operator">*</span>type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">_dictReset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_dictReset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>rehashidx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>pauserehash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DICT_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* \u91CD\u7F6E hash \u7684 2 \u4E2A\u8868 */</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_dictReset</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">int</span> htidx<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span>htidx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>ht_size_exp<span class="token punctuation">[</span>htidx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span>htidx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-\u5E38\u89C1\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#_3-\u5E38\u89C1\u65B9\u6CD5" aria-hidden="true">#</a> 3. \u5E38\u89C1\u65B9\u6CD5</h2><h3 id="_1-\u6DFB\u52A0\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#_1-\u6DFB\u52A0\u5143\u7D20" aria-hidden="true">#</a> 1) \u6DFB\u52A0\u5143\u7D20</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// 1. \u6DFB\u52A0 key \u8282\u70B9\uFF0C\u82E5\u5DF2\u7ECF\u5B58\u5728 key\uFF0C\u6DFB\u52A0\u5931\u8D25</span>
<span class="token keyword">int</span> <span class="token function">dictAdd</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dictEntry <span class="token operator">*</span>entry <span class="token operator">=</span> <span class="token function">dictAddRaw</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// entry == null \u8BF4\u660E \u8BE5 key \u5DF2\u7ECF\u5B58\u5728\uFF0C\u8FD4\u56DE DICT_ERR</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token keyword">return</span> DICT_ERR<span class="token punctuation">;</span>
    <span class="token comment">// entry != null \u8BF4\u660E \u4E0D\u5B58\u5728\u8BE5 key\uFF0C\u8FD4\u56DE DICT_OK</span>
    <span class="token function">dictSetVal</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DICT_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2. \u6DFB\u52A0 key \u8282\u70B9\uFF0C\u82E5\u5DF2\u7ECF\u5B58\u5728\uFF0C\u8986\u76D6\u539F\u503C</span>
<span class="token comment">// \u82E5\u662F\u65B0\u8282\u70B9\uFF0C\u8FD4\u56DE 1\uFF1B\u82E5\u662F\u8986\u76D6\u539F\u503C\uFF0C\u8FD4\u56DE 0</span>
<span class="token keyword">int</span> <span class="token function">dictReplace</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dictEntry <span class="token operator">*</span>entry<span class="token punctuation">,</span> <span class="token operator">*</span>existing<span class="token punctuation">,</span> auxentry<span class="token punctuation">;</span>

    entry <span class="token operator">=</span> <span class="token function">dictAddRaw</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token operator">&amp;</span>existing<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8FD9\u91CC *existing \u4E4B\u524D\u5E76\u6CA1\u6709\u521D\u59CB\u5316\uFF0C\u56E0\u6B64\u4E3A null </span>
    <span class="token comment">// entry != null \u8BF4\u660E\u662F \u6DFB\u52A0\u65B0\u8282\u70B9</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token function">dictSetVal</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Set the new value and free the old one. Note that it is important
     * to do that in this order, as the value may just be exactly the same
     * as the previous one. In this context, think to reference counting,
     * you want to increment (set), and then decrement (free), and not the
     * reverse. */</span>
    auxentry <span class="token operator">=</span> <span class="token operator">*</span>existing<span class="token punctuation">;</span>
    <span class="token function">dictSetVal</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> existing<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dictFreeVal</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token operator">&amp;</span>auxentry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 
 * \u82E5 key \u5DF2\u7ECF\u5B58\u5728\uFF0C\u8FD4\u56DE null\uFF0C\u4E14\u82E5 **existing != null \u5219\u8986\u76D6\u65E7\u503C\uFF1B\u82E5 **existing == null \u5219\u4E0D\u8986\u76D6\u65E7\u503C
 * \u82E5 key \u4E0D\u5B58\u5728\uFF0C\u6DFB\u52A0\u65B0\u8282\u70B9\uFF0C\u5E76\u8FD4\u56DE \u65B0\u8282\u70B9
 */</span>
dictEntry <span class="token operator">*</span><span class="token function">dictAddRaw</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> dictEntry <span class="token operator">*</span><span class="token operator">*</span>existing<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> index<span class="token punctuation">;</span>
    dictEntry <span class="token operator">*</span>entry<span class="token punctuation">;</span>
    <span class="token keyword">int</span> htidx<span class="token punctuation">;</span>

    <span class="token comment">// 1. \u82E5\u6B63\u5728\u91CD\u54C8\u5E0C\u8FC7\u7A0B\u4E2D\uFF0C\u534F\u52A9 \u91CD\u54C8\u5E0C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_dictRehashStep</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">// 2. \u83B7\u5F97 key \u5BF9\u5E94\u7684\u6570\u7EC4\u4E0B\u6807\uFF0C\u82E5\u4E0B\u6807\u4E3A -1 \u8BF4\u660E\u4E0D\u5B58\u5728\uFF0C\u8FD4\u56DE null</span>
     <span class="token comment">// \u5728\u6B64\u8FC7\u7A0B\u4E2D\uFF0C\u53EF\u80FD\u89E6\u53D1 \u6269\u5BB9\u64CD\u4F5C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token function">_dictKeyIndex</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token function">dictHashKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> existing<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

     <span class="token comment">// 3. \u91C7\u7528 \u5934\u63D2\u6CD5\uFF0C\u57FA\u4E8E \u65B0\u6570\u636E\u63A5\u4E0B\u6765\u88AB\u8BBF\u95EE\u7684\u6982\u7387\u6BD4\u8F83\u9AD8 \u8FD9\u4E00\u5047\u8BBE\uFF0C\u8FD9\u6837\u67E5\u627E\u8D77\u6765\u66F4\u5FEB\u4E00\u4E9B</span>
     <span class="token comment">// \u5224\u65AD\u662F\u5426\u5728\u91CD\u54C8\u5E0C\u4E2D\uFF0C\u82E5\u662F\uFF0C\u63D2\u5165\u5230 h[1]\uFF1B\u82E5\u5426\uFF0C\u63D2\u5165\u5230 h[0]</span>
    htidx <span class="token operator">=</span> <span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> metasize <span class="token operator">=</span> <span class="token function">dictMetadataSize</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5982\u679C\u6709\u989D\u5916\u5143\u6570\u636E\uFF0C\u8FD8\u9700\u8981\u5B58\u653E\u5143\u6570\u636E\u7684\u7A7A\u95F4</span>
    entry <span class="token operator">=</span> <span class="token function">zmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span> <span class="token operator">+</span> metasize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u7ED9\u8282\u70B9\u5206\u914D\u5185\u5B58</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>metasize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token function">dictMetadata</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> metasize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    entry<span class="token operator">-&gt;</span>next <span class="token operator">=</span> d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span>htidx<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span>htidx<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> entry<span class="token punctuation">;</span> <span class="token comment">// \u5934\u63D2\u6CD5</span>
    d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span>htidx<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \u8282\u70B9\u6570\u91CF ++</span>

    <span class="token comment">/* Set the hash entry fields. */</span>
    <span class="token function">dictSetKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> entry<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> entry<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

 <span class="token comment">// \u91CD\u54C8\u5E0C\uFF0C\u5F53\u4E14\u4EC5\u5F53 pauserehash == 0 \u65F6\u624D\u4F1A\u89E6\u53D1 \u91CD\u54C8\u5E0C</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_dictRehashStep</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>pauserehash <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">dictRehash</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5224\u65AD dict \u662F\u5426\u5904\u4E8E \u91CD\u54C8\u5E0C \u4E2D</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">dictIsRehashing</span><span class="token expression"><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">-&gt;</span>rehashidx <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>

<span class="token comment">/* 
 * \u6BCF\u6B21\u8BE5\u65B9\u6CD5\u7684\u8C03\u7528\uFF0C\u8D1F\u8D23\u8FC1\u79FB n \u4E2A\u8282\u70B9
 * \u82E5\u5728\u8FC1\u79FB\u8FC7\u7A0B\u4E2D\u9047\u5230 10n \u4E2A\u8282\u70B9\uFF0C\u4E5F\u8FD4\u56DE
 * \u82E5\u5168\u90E8\u8FC1\u79FB\u5B8C\u6210\uFF0C\u8FD4\u56DE 0\uFF1B\u82E5\u672C\u6B21\u8C03\u7528\u8FC1\u79FB\u5DE5\u4F5C\u5B8C\u6210\uFF0C\u8FD4\u56DE 1
 * */</span>
<span class="token keyword">int</span> <span class="token function">dictRehash</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6700\u591A\u9047\u5230 10n \u4E2A\u7A7A\u8282\u70B9\u540E\uFF0C\u76F4\u63A5\u8FD4\u56DE</span>
    <span class="token keyword">int</span> empty_visits <span class="token operator">=</span> n<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dictEntry <span class="token operator">*</span>de<span class="token punctuation">,</span> <span class="token operator">*</span>nextde<span class="token punctuation">;</span>

        <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">DICTHT_SIZE</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>ht_size_exp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>d<span class="token operator">-&gt;</span>rehashidx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u9047\u5230 null \u8282\u70B9\uFF0C\u76F4\u63A5\u589E\u52A0\u6B65\u6570\uFF0C\u6B64\u65F6\u82E5\u7D2F\u79EF\u8FBE\u5230 10n \u4E2A\u7A7A\u8282\u70B9\uFF0C\u76F4\u63A5\u8FD4\u56DE</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token operator">-&gt;</span>rehashidx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            d<span class="token operator">-&gt;</span>rehashidx<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// \u672C\u7EBF\u7A0B\u5DE5\u4F5C\u8FC1\u79FB\u5B8C\u6210\uFF0C\u8FD4\u56DE 1\uFF0C\u4F46\u662F d-&gt;ht_used[0] != 0 \u8BF4\u660E\u8FD8\u5B58\u5728\u8282\u70B9\u7B49\u5F85\u91CD\u54C8\u5E0C</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>empty_visits <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
        <span class="token comment">// \u8BF4\u660E\u9047\u5230\u975E\u7A7A\u8282\u70B9\uFF0C\u4E14\u81EA\u5DF1\u9700\u8981\u8D1F\u8D23\u524D\u79FB\u8BE5\u8282\u70B9\u7684\u5DE5\u4F5C</span>
        de <span class="token operator">=</span> d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token operator">-&gt;</span>rehashidx<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u5F53\u524D\u4E0B\u6807\u7684\u5934\u8282\u70B9</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">uint64_t</span> h<span class="token punctuation">;</span>

            nextde <span class="token operator">=</span> de<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            <span class="token comment">// \u83B7\u53D6\u5F53\u524D key \u5BF9\u5E94\u65B0\u6570\u7EC4\u7684 \u4E0B\u6807</span>
            h <span class="token operator">=</span> <span class="token function">dictHashKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> de<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">DICTHT_SIZE_MASK</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>ht_size_exp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u8FC1\u79FB</span>
            de<span class="token operator">-&gt;</span>next <span class="token operator">=</span> d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">;</span>
            d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> de<span class="token punctuation">;</span>
            d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            de <span class="token operator">=</span> nextde<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token operator">-&gt;</span>rehashidx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// \u6E05\u7A7A</span>
        d<span class="token operator">-&gt;</span>rehashidx<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* \u672C\u7EBF\u7A0B\u8FC1\u79FB\u5DE5\u4F5C\u5B8C\u6210\u540E\uFF0C\u5224\u65AD\u662F\u5426\u5168\u90E8\u8FC1\u79FB\u5B8C\u6210\uFF0C\u82E5\u662F\uFF0C\u91CA\u653E h[0] \u5185\u5B58\uFF0C\u4EA4\u6362 h[0] &amp; h[1] \u5E76\u91CD\u7F6E h[1] */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">zfree</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* Copy the new ht onto the old one */</span>
        d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>ht_size_exp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token operator">-&gt;</span>ht_size_exp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">_dictReset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>rehashidx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* \u8FD8\u6709\u8282\u70B9\u9700\u8981\u8FC1\u79FB */</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u83B7\u53D6 key \u6240\u5728\u6570\u7EC4\u4E0B\u6807</span>
<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">_dictKeyIndex</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> hash<span class="token punctuation">,</span> dictEntry <span class="token operator">*</span><span class="token operator">*</span>existing<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* \u6570\u7EC4\u6269\u5BB9\uFF0C\u82E5\u5185\u5B58\u5206\u914D\u5931\u8D25\uFF0C\u5219\u8FD4\u56DE \u9519\u8BEF */</span>
<span class="token keyword">int</span> <span class="token function">dictExpand</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_dictExpand</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6570\u7EC4\u6269\u5BB9</span>
<span class="token comment">// \u82E5 malloc_failed != null --&gt; malloc_failed = 0 --&gt; \u5141\u8BB8\u5185\u5B58\u5206\u914D\u5931\u8D25\uFF0C\u65E0\u8BBA\u5982\u4F55\u90FD\u8981\u5206\u914D\u5185\u5B58\u7ED9\u65B0\u6570\u7EC4</span>
<span class="token comment">// \u82E5 malloc_failed == null --&gt; \u5185\u5B58\u5206\u914D\u5931\u8D25\uFF0C\u8FD4\u56DE \u9519\u8BEF</span>
<span class="token comment">// </span>
<span class="token comment">// \u65B0\u6570\u7EC4\u5927\u5C0F\uFF0C\u53EF\u4EE5\u770B\u51FA\uFF0C\u53D8\u4E3A\u539F\u6765\u7684 2 \u500D</span>
<span class="token comment">// \u8D1F\u8F7D\u56E0\u5B50 = \u8282\u70B9\u6570 / \u6570\u7EC4\u957F\u5EA6</span>
<span class="token comment">// 1. \u82E5 \u8D1F\u8F7D\u56E0\u5B50 &gt;= 1 &amp;&amp; \u6CA1\u6709\u5728\u6267\u884C bgsave | bgrewiteaof\uFF0C\u4F1A\u6267\u884C rehash</span>
<span class="token comment">// 2. \u82E5 Redis \u6B63\u5728\u6267\u884C bgsave | bgrewiteaof\uFF0C\u53EA\u6709\u5F53\u8282\u70B9\u6570 &gt;= 5 * \u6570\u7EC4\u957F\u5EA6\u65F6\uFF0C\u624D\u4F1A\u8FDB\u884C \u5F3A\u5236\u6269\u5BB9</span>
<span class="token keyword">int</span> <span class="token function">_dictExpand</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> malloc_failed<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>malloc_failed<span class="token punctuation">)</span> <span class="token operator">*</span>malloc_failed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// \u91CD\u54C8\u5E0C\u4E2D | \u6570\u7EC4\u8282\u70B9\u6570\u4E0E size \u5173\u7CFB\u4E0D\u6B63\u786E\u65F6\uFF0C\u8FD4\u56DE \u9519\u8BEF</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">||</span> d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> size<span class="token punctuation">)</span>
        <span class="token keyword">return</span> DICT_ERR<span class="token punctuation">;</span>

    dictEntry <span class="token operator">*</span><span class="token operator">*</span>new_ht_table<span class="token punctuation">;</span> <span class="token comment">// \u5B58\u653E\u6269\u5BB9\u540E\u7684\u6570\u7EC4</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> new_ht_used<span class="token punctuation">;</span>
    <span class="token keyword">signed</span> <span class="token keyword">char</span> new_ht_size_exp <span class="token operator">=</span> <span class="token function">_dictNextExp</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">size_t</span> newsize <span class="token operator">=</span> <span class="token number">1ul</span><span class="token operator">&lt;&lt;</span>new_ht_size_exp<span class="token punctuation">;</span> <span class="token comment">// \u65B0\u6570\u7EC4\u5927\u5C0F\uFF0C\u53EF\u4EE5\u770B\u51FA\uFF0C\u53D8\u4E3A\u539F\u6765\u7684 2 \u500D</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">&lt;</span> size <span class="token operator">||</span> newsize <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dictEntry<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> newsize<span class="token punctuation">)</span>
        <span class="token keyword">return</span> DICT_ERR<span class="token punctuation">;</span>

    <span class="token comment">/* \u5DE6\u79FB\u4F4D\u6570\u548C\u539F\u6765\u4E00\u6837\uFF0C\u8FD4\u56DE \u9519\u8BEF */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_ht_size_exp <span class="token operator">==</span> d<span class="token operator">-&gt;</span>ht_size_exp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> DICT_ERR<span class="token punctuation">;</span>

    <span class="token comment">/* \u7ED9\u65B0\u6570\u7EC4\u5206\u914D\u5185\u5B58 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>malloc_failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        new_ht_table <span class="token operator">=</span> <span class="token function">ztrycalloc</span><span class="token punctuation">(</span>newsize<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dictEntry<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5C1D\u8BD5\u5206\u914D\u5185\u5B58</span>
        <span class="token operator">*</span>malloc_failed <span class="token operator">=</span> new_ht_table <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>malloc_failed<span class="token punctuation">)</span> <span class="token comment">// \u5185\u5B58\u5206\u914D\u5931\u8D25\uFF0C\u8FD4\u56DE \u9519\u8BEF</span>
            <span class="token keyword">return</span> DICT_ERR<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span>
        new_ht_table <span class="token operator">=</span> <span class="token function">zcalloc</span><span class="token punctuation">(</span>newsize<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dictEntry<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u65E0\u8BBA\u5982\u4F55\u90FD\u8981\u5206\u914D\u5185\u5B58</span>

    new_ht_used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">/* Is this the first initialization? If so it&#39;s not really a rehashing
     * we just set the first hash table so that it can accept keys. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        d<span class="token operator">-&gt;</span>ht_size_exp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_ht_size_exp<span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_ht_used<span class="token punctuation">;</span>
        d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_ht_table<span class="token punctuation">;</span>
        <span class="token keyword">return</span> DICT_OK<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Prepare a second hash table for incremental rehashing */</span>
    d<span class="token operator">-&gt;</span>ht_size_exp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_ht_size_exp<span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_ht_used<span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_ht_table<span class="token punctuation">;</span>
    d<span class="token operator">-&gt;</span>rehashidx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DICT_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-\u5220\u9664\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#_2-\u5220\u9664\u5143\u7D20" aria-hidden="true">#</a> 2) \u5220\u9664\u5143\u7D20</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* \u5220\u9664\u5143\u7D20\uFF0C\u5220\u9664\u6210\u529F\uFF0C\u5219\u8FD4\u56DE DICT_OK\uFF1B\u82E5\u4E0D\u5B58\u5728\u8BE5\u5143\u7D20\uFF0C\u8FD4\u56DE DICT_ERR  */</span>
<span class="token comment">// \u5F53 \u5143\u7D20\u4E2A\u6570 &lt; 0.1 * \u6570\u7EC4\u957F\u5EA6\u65F6\uFF0CRedis \u4F1A\u8FDB\u884C \u7F29\u5BB9\u5904\u7406\uFF0C\u4E0D\u8BBA\u662F\u5426\u5904\u4E8E bgsave \u72B6\u6001</span>
<span class="token keyword">int</span> <span class="token function">dictDelete</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>ht<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">dictGenericDelete</span><span class="token punctuation">(</span>ht<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> DICT_OK <span class="token operator">:</span> DICT_ERR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* \u5220\u9664 key\uFF0C\u82E5\u5B58\u5728\uFF0C\u8FD4\u56DE\u539F\u8282\u70B9\uFF1B\u82E5\u4E0D\u5B58\u5728\uFF0C\u8FD4\u56DE null
 * nofree == 0 \u8BF4\u660E\u9700\u8981\u91CA\u653E\u5220\u9664\u7684\u8282\u70B9\u5185\u5B58 */</span>
<span class="token keyword">static</span> dictEntry <span class="token operator">*</span><span class="token function">dictGenericDelete</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">int</span> nofree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint64_t</span> h<span class="token punctuation">,</span> idx<span class="token punctuation">;</span>
    dictEntry <span class="token operator">*</span>he<span class="token punctuation">,</span> <span class="token operator">*</span>prevHe<span class="token punctuation">;</span>
    <span class="token keyword">int</span> table<span class="token punctuation">;</span>

    <span class="token comment">/* 1. dict \u4E3A\u7A7A\uFF0C\u76F4\u63A5\u8FD4\u56DE null */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictSize</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token comment">/* 2. \u91CD\u54C8\u5E0C\u4E2D\uFF0C\u534F\u52A9\u91CD\u54C8\u5E0C */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_dictRehashStep</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    h <span class="token operator">=</span> <span class="token function">dictHashKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u83B7\u53D6 key \u5BF9\u5E94\u7684 hash \u503C</span>

    <span class="token comment">// 3. \u5206\u522B\u5728 h[0] &amp; h[1] \u4E2D\u67E5\u627E</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>table <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> table <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> table<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        idx <span class="token operator">=</span> h <span class="token operator">&amp;</span> <span class="token function">DICTHT_SIZE_MASK</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>ht_size_exp<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u83B7\u53D6\u5BF9\u5E94\u6570\u7EC4\u4E0B\u6807</span>
        he <span class="token operator">=</span> d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        prevHe <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>he<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span>he<span class="token operator">-&gt;</span>key <span class="token operator">||</span> <span class="token function">dictCompareKeys</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">,</span> he<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">/* \u627E\u5230\u8981\u5220\u9664\u7684\u5143\u7D20\uFF0C\u5C06\u5176\u5220\u9664\uFF0C\u524D\u540E\u8282\u70B9\u8FDE\u63A5 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>prevHe<span class="token punctuation">)</span>
                    prevHe<span class="token operator">-&gt;</span>next <span class="token operator">=</span> he<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> he<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nofree<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">dictFreeUnlinkedEntry</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> he<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                d<span class="token operator">-&gt;</span>ht_used<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> he<span class="token punctuation">;</span> <span class="token comment">// \u627E\u5230\u5373\u53EF\u8FD4\u56DE</span>
            <span class="token punctuation">}</span>
            prevHe <span class="token operator">=</span> he<span class="token punctuation">;</span>
            he <span class="token operator">=</span> he<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// \u82E5\u4E0D\u5728\u91CD\u54C8\u5E0C\u4E2D\uFF0Ch[0] \u627E\u5B8C\u4E5F\u6CA1\u6709\u627E\u5230\uFF0C\u65E0\u9700\u7EE7\u7EED\u627E h[1]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token comment">/* \u6E05\u7A7A\uFF0C\u91CA\u653E\u7A7A\u95F4 */</span>
<span class="token keyword">void</span> <span class="token function">dictFreeUnlinkedEntry</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> dictEntry <span class="token operator">*</span>he<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>he <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">dictFreeKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> he<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dictFreeVal</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> he<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">zfree</span><span class="token punctuation">(</span>he<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-\u67E5\u627E\u5143\u7D20" tabindex="-1"><a class="header-anchor" href="#_3-\u67E5\u627E\u5143\u7D20" aria-hidden="true">#</a> 3) \u67E5\u627E\u5143\u7D20</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>dictEntry <span class="token operator">*</span><span class="token function">dictFind</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    dictEntry <span class="token operator">*</span>he<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> h<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> table<span class="token punctuation">;</span>

    <span class="token comment">// 1. dict \u4E3A\u7A7A\uFF0C\u76F4\u63A5\u8FD4\u56DE null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictSize</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
    
    <span class="token comment">// 2. \u91CD\u54C8\u5E0C\u4E2D\uFF0C\u534F\u52A9\u8FC1\u79FB</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_dictRehashStep</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    h <span class="token operator">=</span> <span class="token function">dictHashKey</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8BA1\u7B97 hash \u503C</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span>table <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> table <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> table<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        idx <span class="token operator">=</span> h <span class="token operator">&amp;</span> <span class="token function">DICTHT_SIZE_MASK</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>ht_size_exp<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        he <span class="token operator">=</span> d<span class="token operator">-&gt;</span>ht_table<span class="token punctuation">[</span>table<span class="token punctuation">]</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>he<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span>he<span class="token operator">-&gt;</span>key <span class="token operator">||</span> <span class="token function">dictCompareKeys</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> key<span class="token punctuation">,</span> he<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> he<span class="token punctuation">;</span> <span class="token comment">// \u627E\u5230\uFF0C\u5373\u53EF\u8FD4\u56DE</span>
            he <span class="token operator">=</span> he<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// \u82E5\u4E0D\u5728\u91CD\u54C8\u5E0C\u4E2D\uFF0C\u53EA\u9700\u67E5\u627E h[0]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function m(b,h){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,k,n("p",null,[n("a",r,[d,c(a)])]),v])}var _=t(i,[["render",m],["__file","dict.html.vue"]]);export{_ as default};
