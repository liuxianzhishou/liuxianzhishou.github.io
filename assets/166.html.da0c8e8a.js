import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.5aebcaaa.js";var t="/assets/img_11.184ac6ed.png",o="/assets/img_10.38704af0.png";const e={},c=p('<h1 id="_166-\u5206\u6570\u5230\u5C0F\u6570" tabindex="-1"><a class="header-anchor" href="#_166-\u5206\u6570\u5230\u5C0F\u6570" aria-hidden="true">#</a> \u{1F315}\u{1F315} 166. \u5206\u6570\u5230\u5C0F\u6570</h1><p>\u96BE\u5EA6: \u{1F315}\u{1F315}</p><h3 id="\u95EE\u9898\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u63CF\u8FF0" aria-hidden="true">#</a> \u95EE\u9898\u63CF\u8FF0</h3><p><img src="'+t+`" alt="img_11.png"></p><hr><h3 id="\u89E3\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6CD5" aria-hidden="true">#</a> \u89E3\u6CD5</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fractionToDecimal</span><span class="token punctuation">(</span><span class="token keyword">int</span> numerator<span class="token punctuation">,</span> <span class="token keyword">int</span> denominator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u601D\u8DEF\uFF1A</span>
        <span class="token comment">// HashMap \u5B58\u653E\u5DF2\u7ECF\u8BA1\u7B97\u8FC7\u7684\u5206\u6BCD\u503C\uFF0C\u5224\u65AD\u662F\u5426\u51FA\u73B0\u91CD\u590D\u5143\u7D20</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>numerator <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u4E3A\u9632\u6B62\u8D85\u8303\uFF0C\u8F6C\u5316\u4E3A long</span>
        <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> numerator<span class="token punctuation">;</span>
        <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> denominator<span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> pos <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pos <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            a <span class="token operator">=</span> a <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token operator">:</span> <span class="token operator">-</span>a<span class="token punctuation">;</span>
            b <span class="token operator">=</span> b <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> b<span class="token operator">:</span> <span class="token operator">-</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> cur <span class="token operator">=</span> a <span class="token operator">%</span> b <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// \u4ECE\u5C0F\u6570\u90E8\u5206\u5F00\u59CB\u8BB0\u5F55</span>
        <span class="token keyword">long</span> partInt <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span> <span class="token comment">// \u8BA1\u7B97\u6574\u6570\u90E8\u5206</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>partInt<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// \u80FD\u88AB\u6574\u9664\uFF0C\u76F4\u63A5\u8FD4\u56DE</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u4E0D\u80FD\u88AB\u6574\u9664\uFF0C\u8BA1\u7B97\u5C0F\u6570\u90E8\u5206</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u52A0\u5C0F\u6570\u70B9</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u52A0\u8D1F\u53F7</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// System.out.println(partInt + &quot; : &quot; + cur);</span>
        <span class="token keyword">int</span> havIndex <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5F53\u524D sb \u5DF2\u6709\u957F\u5EA6\uFF0C\u8BB0\u5F55\u4E0B\u6807\u4ECE\u8FD9\u91CC\u5F00\u59CB</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> havIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// val - \u5B58\u653E\u4E0B\u6807</span>
        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// \u5224\u65AD\u662F\u5426\u51FA\u73B0\u5FAA\u73AF</span>
        <span class="token class-name">String</span> circle <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> curIndex <span class="token operator">=</span> havIndex<span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> app <span class="token operator">=</span> cur <span class="token operator">/</span> b<span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5148\u4E0D\u7BA1\u5C0F\u6570\u70B9\uFF0C\u6700\u540E\u5224\u65AD\uFF0C\u53EA\u8981\u6709\u524D\u5BFC0\uFF0C\u90A3\u4E48\u5C0F\u6570\u70B9\u5C31\u5728\u7B2C\u4E00\u4E2A 0 \u540E\u9762</span>
            curIndex <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> next <span class="token operator">=</span> cur <span class="token operator">%</span> b <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token comment">// System.out.println(sb.toString() + &quot;   &quot; + cur + &quot;   &quot; + next);</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u51FA\u73B0\u5FAA\u73AF</span>
                <span class="token keyword">int</span> preIndex <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u67E5\u770B\u4E0A\u4E00\u6B21\u51FA\u73B0\u8BE5\u503C\u7684\u4E0B\u6807\u662F\u591A\u5C11</span>
                circle <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>preIndex<span class="token punctuation">,</span> curIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> curIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// System.out.println(sb.toString() + &quot;  &quot; + circle);</span>
        <span class="token comment">// \u6DFB\u52A0\u5C0F\u6570\u90E8\u5206\u7684\u5FAA\u73AF\uFF0C\u7531\u4E8E\u5DF2\u7ECF\u5F97\u51FA\u5FAA\u73AF\uFF0C\u6240\u4EE5\u5B9E\u9645\u4E0A\u6DFB\u52A0\u7684\u662F\u4E24\u8FB9\u7684\u62EC\u53F7</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> circle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="\u8F93\u51FA" tabindex="-1"><a class="header-anchor" href="#\u8F93\u51FA" aria-hidden="true">#</a> \u8F93\u51FA</h3><p><img src="`+o+'" alt="img_10.png"></p>',10),l=[c];function i(u,k){return s(),a("div",null,l)}var m=n(e,[["render",i],["__file","166.html.vue"]]);export{m as default};
