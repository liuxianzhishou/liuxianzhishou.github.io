import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.5aebcaaa.js";const t={},e=p(`<h1 id="stampedlock" tabindex="-1"><a class="header-anchor" href="#stampedlock" aria-hidden="true">#</a> \u{1F539} StampedLock</h1><h2 id="_1-\u7C7B\u6CE8\u91CA" tabindex="-1"><a class="header-anchor" href="#_1-\u7C7B\u6CE8\u91CA" aria-hidden="true">#</a> 1. \u7C7B\u6CE8\u91CA</h2><h3 id="\u4E09\u79CD\u9501" tabindex="-1"><a class="header-anchor" href="#\u4E09\u79CD\u9501" aria-hidden="true">#</a> \u4E09\u79CD\u9501\uFF1A</h3><ul><li><strong>\u5199\u9501</strong><ul><li>\u72EC\u5360 &amp; <strong>\u4E0D\u53EF\u91CD\u5165</strong></li><li>\u76F8\u540C\u65F6\u95F4\u53EA\u80FD\u6709\u4E00\u4E2A\u7EBF\u7A0B\u83B7\u53D6\u9501\uFF0C\u5176\u4ED6\u7EBF\u7A0B\u8BF7\u6C42\u8BFB\u9501\u548C\u5199\u9501\u90FD\u4F1A\u88AB\u963B\u585E\uFF0C\u5F53\u524D\u6CA1\u6709\u7EBF\u7A0B\u6301\u6709\u8BFB\u9501\u6216\u5199\u9501\u7684\u65F6\u5019\u624D\u53EF\u4EE5\u83B7\u5F97\u83B7\u53D6\u5230\u8BE5\u9501</li></ul></li><li><strong>\u8BFB\u9501</strong><ul><li>\u60B2\u89C2\u8BFB\u9501\u662F\u4E00\u4E2A\u5171\u4EAB\u9501\uFF0C\u6CA1\u6709\u7EBF\u7A0B\u5360\u7528\u5199\u9501\u7684\u60C5\u51B5\u4E0B\uFF0C\u591A\u4E2A\u7EBF\u7A0B\u53EF\u4EE5\u540C\u65F6\u83B7\u53D6\u8BFB\u9501\u3002\u5982\u679C\u5176\u4ED6\u7EBF\u7A0B\u5DF2\u7ECF\u83B7\u5F97\u4E86\u5199\u9501\uFF0C\u5219\u963B\u585E\u5F53\u524D\u7EBF\u7A0B</li></ul></li><li><strong>\u4E50\u89C2\u8BFB\u9501</strong><ul><li>\u5728\u64CD\u4F5C\u6570\u636E\u524D\u5E76\u6CA1\u6709\u52A0\u9501\uFF08\u4F7F\u7528CAS\u65B9\u5F0F\u66F4\u65B0\u9501\u7684\u72B6\u6001\uFF09\uFF0C\u800C\u662F\u91C7\u7528\u8BD5\u63A2\u7684\u65B9\u5F0F\u3002\u53EA\u8981\u5F53\u524D\u6CA1\u6709\u5199\u9501\u5C31\u53EF\u4EE5\u83B7\u5F97\u4E00\u4E2A\u975E0\u7684stamp\uFF0C\u5982\u679C\u5DF2\u7ECF\u5B58\u5728\u5199\u9501\u5219\u8FD4\u56DE\u4E00\u4E2A\u4E3A0\u7684stamp</li><li>\u7531\u4E8E\u6CA1\u6709\u4F7F\u7528 <code>CAS</code> \u65B9\u6CD5\uFF0C\u4E5F\u6CA1\u6709\u771F\u6B63\u7684\u52A0\u9501\uFF0C\u6240\u4EE5\u5E76\u53D1\u6027\u80FD\u8981\u6BD4 readLock \u8FD8\u8981\u9AD8\u3002</li><li>\u4F46\u662F\u7531\u4E8E\u6CA1\u6709\u4F7F\u7528\u771F\u6B63\u7684\u9501\uFF0C\u5982\u679C\u6570\u636E\u4E2D\u9014\u88AB\u4FEE\u6539\uFF0C\u5C31\u4F1A\u9020\u6210<strong>\u6570\u636E\u4E0D\u4E00\u81F4</strong>\u95EE\u9898\u3002</li><li>\u5982\u679C\u67D0\u4E2A\u7EBF\u7A0B\u5DF2\u7ECF\u83B7\u53D6\u4E86\u5199\u9501\uFF0C\u8FD9\u65F6\u5019\u518D\u5C1D\u8BD5\u83B7\u53D6\u4E50\u89C2\u9501\u4E5F\u662F\u53EF\u4EE5\u83B7\u53D6\u7684\uFF0C\u53EA\u662F\u5F97\u5230\u7684stamp\u4E3A0\uFF0C\u65E0\u6CD5\u901A\u8FC7validate\u9A8C\u8BC1\u3002</li><li>\u5982\u679C\u56E0\u4E3A\u5176\u4ED6\u7EBF\u7A0B\u589E\u52A0\u5199\u9501\uFF0C\u5219\u4F1A\u5BFC\u81F4stamp\u53D1\u751F\u53D8\u5316\uFF0C\u4ECE\u800Cvalidate\u5931\u8D25\u3002\u8FD9\u79CD\u60C5\u51B5\u4E0B\u9700\u8981\u91CD\u65B0\u83B7\u53D6\u4E50\u89C2\u8BFB\u9501\u3002</li></ul></li></ul><h3 id="\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528" aria-hidden="true">#</a> \u4F7F\u7528</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token keyword">double</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StampedLock</span> sl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">double</span> deltaX<span class="token punctuation">,</span> <span class="token keyword">double</span> deltaY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5199\u9501\u6A21\u5F0F</span>
     <span class="token keyword">long</span> stamp <span class="token operator">=</span> sl<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">try</span> <span class="token punctuation">{</span>
       x <span class="token operator">+=</span> deltaX<span class="token punctuation">;</span>
       y <span class="token operator">+=</span> deltaY<span class="token punctuation">;</span>
     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
       sl<span class="token punctuation">.</span><span class="token function">unlockWrite</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">double</span> <span class="token function">distanceFromOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u8BFB\u6A21\u5F0F</span>
     <span class="token keyword">long</span> stamp <span class="token operator">=</span> sl<span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5C1D\u8BD5\u4E50\u89C2\u8BFB</span>
     <span class="token keyword">double</span> currentX <span class="token operator">=</span> x<span class="token punctuation">,</span> currentY <span class="token operator">=</span> y<span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sl<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u4E50\u89C2\u8BFB\u4E0D\u6EE1\u8DB3\u6761\u4EF6\uFF0C\u5347\u7EA7\u4E3A \u666E\u901A\u8BFB</span>
        stamp <span class="token operator">=</span> sl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          currentX <span class="token operator">=</span> x<span class="token punctuation">;</span>
          currentY <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
           sl<span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>currentX <span class="token operator">*</span> currentX <span class="token operator">+</span> currentY <span class="token operator">*</span> currentY<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">void</span> <span class="token function">moveIfAtOrigin</span><span class="token punctuation">(</span><span class="token keyword">double</span> newX<span class="token punctuation">,</span> <span class="token keyword">double</span> newY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u9501\u7684\u5347\u7EA7</span>
     <span class="token keyword">long</span> stamp <span class="token operator">=</span> sl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u666E\u901A\u8BFB</span>
     <span class="token keyword">try</span> <span class="token punctuation">{</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0.0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">long</span> ws <span class="token operator">=</span> sl<span class="token punctuation">.</span><span class="token function">tryConvertToWriteLock</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5347\u7EA7\u4E3A \u5199\u9501</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5347\u7EA7\u6210\u529F\uFF0C\u66FF\u6362 \u6807\u8BB0\u6233</span>
           stamp <span class="token operator">=</span> ws<span class="token punctuation">;</span>
           x <span class="token operator">=</span> newX<span class="token punctuation">;</span>
           y <span class="token operator">=</span> newY<span class="token punctuation">;</span>
           <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u5347\u7EA7\u5931\u8D25\uFF0C\u91CA\u653E\u8BFB\u9501\uFF0C\u91CD\u65B0\u751F\u6210 \u8BFB\u9501 \u6807\u8BB0\u6233\uFF0C\u5FAA\u73AF</span>
           sl<span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
           stamp <span class="token operator">=</span> sl<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
       sl<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-\u7C7B\u56FE" tabindex="-1"><a class="header-anchor" href="#_2-\u7C7B\u56FE" aria-hidden="true">#</a> 2. \u7C7B\u56FE</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StampedLock</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6784\u9020\u51FD\u6570</span>
    <span class="token keyword">public</span> <span class="token class-name">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state <span class="token operator">=</span> ORIGIN<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-\u5C5E\u6027" tabindex="-1"><a class="header-anchor" href="#_3-\u5C5E\u6027" aria-hidden="true">#</a> 3. \u5C5E\u6027</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6001602636862214147L</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** \u5904\u7406\u5668\u6570\u91CF\uFF0C\u7528\u4E8E\u81EA\u65CB\u63A7\u5236 */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NCPU <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** \u5165\u961F \u524D\u7684\u6700\u5927\u91CD\u8BD5\u6B21\u6570 */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SPINS <span class="token operator">=</span> <span class="token punctuation">(</span>NCPU <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** aqcuire \u963B\u585E\u524D\u7684\u6700\u5927\u91CD\u8BD5\u6B21\u6570 */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HEAD_SPINS <span class="token operator">=</span> <span class="token punctuation">(</span>NCPU <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** \u91CD\u65B0\u963B\u585E\u524D\u7684\u6700\u5927\u91CD\u8BD5\u6B21\u6570 */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_HEAD_SPINS <span class="token operator">=</span> <span class="token punctuation">(</span>NCPU <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** \u7B49\u5F85\u6EA2\u51FA\u81EA\u65CB\u9501\u65F6\u7684\u8BA9\u6B65\u5468\u671F */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> OVERFLOW_YIELD_RATE <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// must be power 2 - 1</span>

    <span class="token doc-comment comment">/** \u6EA2\u51FA\u524D\u7528\u4E8E \u8BFB\u9501 \u7684\u4F4D\u6570 */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LG_READERS <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

    <span class="token comment">// \u9501\u5B9A\u72B6\u6001\u548C\u6807\u8BB0\u64CD\u4F5C\u7684\u503C</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> RUNIT <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> WBIT  <span class="token operator">=</span> <span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> LG_READERS<span class="token punctuation">;</span> <span class="token comment">// \u5199\u9501\u5360\u636E\u9664\u4E86 \u4F4E 7 \u4F4D\u4EE5\u5916\u7684\u9AD8\u4F4D</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> RBITS <span class="token operator">=</span> WBIT <span class="token operator">-</span> <span class="token number">1L</span><span class="token punctuation">;</span> <span class="token comment">// \u8BFB\u9501\u5360\u636E \u4F4E 7 \u4F4D</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> RFULL <span class="token operator">=</span> RBITS <span class="token operator">-</span> <span class="token number">1L</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> ABITS <span class="token operator">=</span> RBITS <span class="token operator">|</span> WBIT<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> SBITS <span class="token operator">=</span> <span class="token operator">~</span>RBITS<span class="token punctuation">;</span> <span class="token comment">// note overlap with ABITS</span>

    <span class="token comment">// \u9501\u5B9A\u72B6\u6001\u7684\u521D\u59CB\u503C\uFF1B\u907F\u514D\u5931\u8D25\u503C\u4E3A\u96F6</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> ORIGIN <span class="token operator">=</span> WBIT <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// \u53D6\u6D88\u83B7\u53D6\u65B9\u6CD5\u7684\u7279\u6B8A\u503C\uFF0C\u56E0\u6B64\u8C03\u7528\u8005\u53EF\u4EE5\u629B\u51FA IE</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> INTERRUPTED <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token comment">// \u8282\u70B9\u72B6\u6001\u7684\u503C</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WAITING   <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// \u8282\u70B9\u7684\u6A21\u5F0F\uFF08int \u4E0D\u662F\u5E03\u5C14\u503C\u4EE5\u5141\u8BB8\u7B97\u672F\uFF09</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RMODE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> WMODE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** Wait nodes */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">WNode</span> <span class="token punctuation">{</span>
        <span class="token keyword">volatile</span> <span class="token class-name">WNode</span> prev<span class="token punctuation">;</span>
        <span class="token keyword">volatile</span> <span class="token class-name">WNode</span> next<span class="token punctuation">;</span>
        <span class="token keyword">volatile</span> <span class="token class-name">WNode</span> cowait<span class="token punctuation">;</span>    <span class="token comment">// list of linked readers</span>
        <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>   <span class="token comment">// non-null while possibly parked</span>
        <span class="token keyword">volatile</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>      <span class="token comment">// 0, WAITING, or CANCELLED</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> mode<span class="token punctuation">;</span>           <span class="token comment">// RMODE or WMODE</span>
        <span class="token class-name">WNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token class-name">WNode</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span> mode <span class="token operator">=</span> m<span class="token punctuation">;</span> prev <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/** Head of CLH queue */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">WNode</span> whead<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** Tail (last) of CLH queue */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">WNode</span> wtail<span class="token punctuation">;</span>

    <span class="token comment">// views</span>
    <span class="token keyword">transient</span> <span class="token class-name">ReadLockView</span> readLockView<span class="token punctuation">;</span>
    <span class="token keyword">transient</span> <span class="token class-name">WriteLockView</span> writeLockView<span class="token punctuation">;</span>
    <span class="token keyword">transient</span> <span class="token class-name">ReadWriteLockView</span> readWriteLockView<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** Lock sequence/state */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> state<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/** \u8BFB\u9501\u5DF2\u6EE1\u65F6\uFF0C\u8FD9\u4E2A\u8BB0\u5F55\u8D85\u51FA\u8BFB\u9501\u6700\u5927\u4E2A\u6570\u7684 \u4E2A\u6570 */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> readerOverflow<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-\u5185\u90E8\u7C7B" tabindex="-1"><a class="header-anchor" href="#_4-\u5185\u90E8\u7C7B" aria-hidden="true">#</a> 4. \u5185\u90E8\u7C7B</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token comment">// \u8BFB\u9501</span>
    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ReadLockView</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// \u8C03\u7528\u4E3B\u7C7B\u7684 \u65B9\u6CD5</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
            <span class="token function">readLockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">tryReadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// \u4E0D\u53EF\u91CD\u5165</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">tryReadLock</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> unit<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">unstampedUnlockRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5199\u9501</span>
    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">WriteLockView</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
            <span class="token function">writeLockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">tryWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// \u4E0D\u53EF\u91CD\u5165</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">tryWriteLock</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> unit<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">unstampedUnlockWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u8BFB\u5199\u9501</span>
    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteLockView</span> <span class="token keyword">implements</span> <span class="token class-name">ReadWriteLock</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">Lock</span> <span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">asReadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Lock</span> <span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">asWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-\u5E38\u7528\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#_5-\u5E38\u7528\u65B9\u6CD5" aria-hidden="true">#</a> 5. \u5E38\u7528\u65B9\u6CD5</h2><h3 id="_1-\u5199\u9501\u76F8\u5173" tabindex="-1"><a class="header-anchor" href="#_1-\u5199\u9501\u76F8\u5173" aria-hidden="true">#</a> 1) \u5199\u9501\u76F8\u5173</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> s<span class="token punctuation">,</span> next<span class="token punctuation">;</span>  
        <span class="token comment">// state == 0 \u8BF4\u660E\u6CA1\u6709\u7EBF\u7A0B\u5360\u636E</span>
        <span class="token comment">// CAS \u4FEE\u6539 state ++</span>
        <span class="token comment">// \u4FEE\u6539\u6210\u529F\uFF0C\u5219\u8FD4\u56DE state ++ \u7684\u503C</span>
        <span class="token comment">// \u4FEE\u6539\u5931\u8D25\uFF0C\u6267\u884C acquireWrite(false, 0L) \u81EA\u65CB\u5165\u961F</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span> <span class="token operator">&amp;&amp;</span>
                 <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next <span class="token operator">=</span> s <span class="token operator">+</span> WBIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                next <span class="token operator">:</span> <span class="token function">acquireWrite</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u5C1D\u8BD5\u83B7\u53D6 \u5199\u9501</span>
    <span class="token comment">// \u83B7\u53D6\u6210\u529F\uFF0C\u8FD4\u56DE state ++ \u7684\u503C\uFF1B\u83B7\u53D6\u5931\u8D25\uFF0C\u8FD4\u56DE 0</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">tryWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> s<span class="token punctuation">,</span> next<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span> <span class="token operator">&amp;&amp;</span>
                 <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next <span class="token operator">=</span> s <span class="token operator">+</span> WBIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                next <span class="token operator">:</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u6307\u5B9A\u65F6\u95F4\u5185\u5C1D\u8BD5\u83B7\u53D6\u5199\u9501</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">tryWriteLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> next<span class="token punctuation">,</span> deadline<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token function">tryWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> next<span class="token punctuation">;</span> <span class="token comment">// \u5C1D\u8BD5\u83B7\u53D6\u6210\u529F\uFF0C\u8FD4\u56DE</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token number">0L</span><span class="token punctuation">;</span> <span class="token comment">// \u7B49\u5F85\u65F6\u95F4\u5230\uFF0C\u8FD4\u56DE</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>deadline <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nanos<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                deadline <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span> <span class="token comment">// \u83B7\u53D6\u5F53\u524D\u5269\u4F59\u7B49\u5F85\u65F6\u95F4</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token function">acquireWrite</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> deadline<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> INTERRUPTED<span class="token punctuation">)</span> <span class="token comment">// \u6307\u5B9A\u65F6\u95F4\u5185\u83B7\u9501</span>
                <span class="token keyword">return</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u72EC\u5360\u83B7\u53D6\u9501\uFF0C\u5FC5\u8981\u65F6\u963B\u585E\uFF0C\u76F4\u5230\u53EF\u7528\u6216\u5F53\u524D\u7EBF\u7A0B\u88AB\u4E2D\u65AD\u3002</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">writeLockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token function">acquireWrite</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> INTERRUPTED<span class="token punctuation">)</span>
            <span class="token keyword">return</span> next<span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u91CA\u653E\u5199\u9501</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlockWrite</span><span class="token punctuation">(</span><span class="token keyword">long</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WNode</span> h<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> stamp <span class="token operator">||</span> <span class="token punctuation">(</span>stamp <span class="token operator">&amp;</span> WBIT<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        state <span class="token operator">=</span> <span class="token punctuation">(</span>stamp <span class="token operator">+=</span> WBIT<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span> <span class="token operator">?</span> ORIGIN <span class="token operator">:</span> stamp<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> whead<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">release</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u5C1D\u8BD5\u91CA\u653E\u5199\u9501</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryUnlockWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> s<span class="token punctuation">;</span> <span class="token class-name">WNode</span> h<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> WBIT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            state <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">+=</span> WBIT<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span> <span class="token operator">?</span> ORIGIN <span class="token operator">:</span> s<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> whead<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">release</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-\u8BFB\u9501\u76F8\u5173" tabindex="-1"><a class="header-anchor" href="#_2-\u8BFB\u9501\u76F8\u5173" aria-hidden="true">#</a> 2) \u8BFB\u9501\u76F8\u5173</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> s <span class="token operator">=</span> state<span class="token punctuation">,</span> next<span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>whead <span class="token operator">==</span> wtail <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">&lt;</span> RFULL <span class="token operator">&amp;&amp;</span>
                 <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next <span class="token operator">=</span> s <span class="token operator">+</span> RUNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                next <span class="token operator">:</span> <span class="token function">acquireRead</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">tryReadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> s<span class="token punctuation">,</span> m<span class="token punctuation">,</span> next<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">==</span> WBIT<span class="token punctuation">)</span> <span class="token comment">// \u8D85\u51FA\u8BFB\u9501\u6700\u5927\u5360\u7528\u6570</span>
                <span class="token keyword">return</span> <span class="token number">0L</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> RFULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next <span class="token operator">=</span> s <span class="token operator">+</span> RUNIT<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token comment">// m == RFULL\uFF0C\u7528 readerOverflow \u8BB0\u5F55\u8D85\u51FA\u8303\u56F4\u7684\u8BFB\u9501\u6570\u91CF</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token function">tryIncReaderOverflow</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">readLockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token function">acquireRead</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> INTERRUPTED<span class="token punctuation">)</span>
            <span class="token keyword">return</span> next<span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u91CA\u653E\u8BFB\u9501</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlockRead</span><span class="token punctuation">(</span><span class="token keyword">long</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> s<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token class-name">WNode</span> h<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>stamp <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token punctuation">(</span>stamp <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span> <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> s <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span> <span class="token operator">||</span> m <span class="token operator">==</span> WBIT<span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> RFULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s <span class="token operator">-</span> RUNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> RUNIT <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> whead<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token function">release</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryDecReaderOverflow</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u5C1D\u8BD5\u91CA\u653E\u8BFB\u9501</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryUnlockRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> s<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token class-name">WNode</span> h<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">&lt;</span> WBIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> RFULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s <span class="token operator">-</span> RUNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> RUNIT <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> whead<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token function">release</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryDecReaderOverflow</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-\u4E50\u89C2\u9501\u76F8\u5173" tabindex="-1"><a class="header-anchor" href="#_3-\u4E50\u89C2\u9501\u76F8\u5173" aria-hidden="true">#</a> 3) \u4E50\u89C2\u9501\u76F8\u5173</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> s<span class="token punctuation">;</span>
        <span class="token comment">// \u6CA1\u6709\u88AB\u5199\u9501\u5360\u636E\uFF0C\u8FD4\u56DE \u4E00\u4E2A\u6807\u8BB0\u6233\uFF0C\u7528\u4E8E\u540E\u7EED\u7684 validate\uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE 0</span>
        <span class="token comment">// \u6CA1\u6709\u52A0\u9501\uFF0C\u6CA1\u6709 CAS \u64CD\u4F5C\uFF0C\u4E4B\u95F4\u8FD4\u56DE\u5F53\u524D\u751F\u6210\u7684 \u6807\u8BB0\u6233\uFF0C\u9700\u8981\u548C validate \u642D\u914D\u4F7F\u7528</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> WBIT<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>s <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0L</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u6839\u636E\u7ED9\u5B9A \u6807\u8BB0\u6233\uFF0C\u548C\u5F53\u524D\u72B6\u6001\u5F97\u5230\u7684 \u6807\u8BB0\u6233\uFF0C\u5BF9\u6BD4\uFF0C\u5982\u679C\u671F\u95F4\u6CA1\u6709\u6539\u53D8\uFF0C\u5219\u8BF4\u660E\u6210\u529F\u83B7\u53D6 \u4E50\u89C2\u9501</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">long</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">loadFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>stamp <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>state <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u5982\u679C\u9501\u72B6\u6001\u4E0E\u7ED9\u5B9A\u7684\u6807\u8BB0\u5339\u914D\uFF0C\u5219\u91CA\u653E\u76F8\u5E94\u7684\u9501\u6A21\u5F0F\u3002</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token keyword">long</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> a <span class="token operator">=</span> stamp <span class="token operator">&amp;</span> ABITS<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">;</span> <span class="token class-name">WNode</span> h<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>stamp <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> s <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> WBIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> m<span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                state <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">+=</span> WBIT<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span> <span class="token operator">?</span> ORIGIN <span class="token operator">:</span> s<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> whead<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token function">release</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0L</span> <span class="token operator">||</span> a <span class="token operator">&gt;=</span> WBIT<span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> RFULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s <span class="token operator">-</span> RUNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> RUNIT <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> whead<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token function">release</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryDecReaderOverflow</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u5982\u679C\u9501\u5B9A\u72B6\u6001\u4E0E\u7ED9\u5B9A\u6807\u8BB0\u5339\u914D\uFF0C\u5219\u6267\u884C\u4EE5\u4E0B\u64CD\u4F5C\u4E4B\u4E00\u3002</span>
    <span class="token comment">// 1. \u5982\u679C\u6807\u8BB0\u8868\u793A\u6301\u6709\u5199\u9501\uFF0C\u5219\u8FD4\u56DE\u5B83\u3002</span>
    <span class="token comment">// 2. \u5982\u679C\u8BFB\u9501\uFF0C\u5982\u679C\u5199\u9501\u53EF\u7528\uFF0C\u5219\u91CA\u653E\u8BFB\u9501\u5E76\u8FD4\u56DE\u5199\u6233\u3002</span>
    <span class="token comment">// 3. \u5982\u679C\u662F\u4E50\u89C2\u8BFB\u53D6\uFF0C\u5219\u4EC5\u5728\u7ACB\u5373\u53EF\u7528\u65F6\u624D\u8FD4\u56DE\u5199\u5165\u6233\u8BB0\u3002</span>
    <span class="token comment">// 4. \u5728\u6240\u6709\u5176\u4ED6\u60C5\u51B5\u4E0B\uFF0C\u6B64\u65B9\u6CD5\u8FD4\u56DE\u96F6\u3002</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">tryConvertToWriteLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> a <span class="token operator">=</span> stamp <span class="token operator">&amp;</span> ABITS<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>stamp <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> s <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next <span class="token operator">=</span> s <span class="token operator">+</span> WBIT<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> WBIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> m<span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> stamp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> RUNIT <span class="token operator">&amp;&amp;</span> a <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next <span class="token operator">=</span> s <span class="token operator">-</span> RUNIT <span class="token operator">+</span> WBIT<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0L</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u5982\u679C\u9501\u5B9A\u72B6\u6001\u4E0E\u7ED9\u5B9A\u6807\u8BB0\u5339\u914D\uFF0C\u5219\u6267\u884C\u4EE5\u4E0B\u64CD\u4F5C\u4E4B\u4E00\u3002</span>
    <span class="token comment">// 1. \u5982\u679C\u6807\u8BB0\u8868\u793A\u6301\u6709\u5199\u9501\uFF0C\u5219\u91CA\u653E\u5B83\u5E76\u83B7\u5F97\u8BFB\u9501\u3002</span>
    <span class="token comment">// 2. \u5982\u679C\u662F\u8BFB\u9501\uFF0C\u5219\u8FD4\u56DE\u5B83\u3002</span>
    <span class="token comment">// 3. \u5982\u679C\u662F\u4E50\u89C2\u8BFB\u53D6\uFF0C\u5219\u83B7\u53D6\u8BFB\u53D6\u9501\u5E76\u4EC5\u5728\u7ACB\u5373\u53EF\u7528\u65F6\u8FD4\u56DE\u8BFB\u53D6\u6807\u8BB0\u3002</span>
    <span class="token comment">// 4. \u5728\u6240\u6709\u5176\u4ED6\u60C5\u51B5\u4E0B\uFF0C\u6B64\u65B9\u6CD5\u8FD4\u56DE\u96F6\u3002</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">tryConvertToReadLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> a <span class="token operator">=</span> stamp <span class="token operator">&amp;</span> ABITS<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next<span class="token punctuation">;</span> <span class="token class-name">WNode</span> h<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>stamp <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> s <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> RFULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next <span class="token operator">=</span> s <span class="token operator">+</span> RUNIT<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> next<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token function">tryIncReaderOverflow</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> WBIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> m<span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                state <span class="token operator">=</span> next <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>WBIT <span class="token operator">+</span> RUNIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> whead<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token function">release</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0L</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;</span> WBIT<span class="token punctuation">)</span>
                <span class="token keyword">return</span> stamp<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0L</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// \u5982\u679C\u9501\u5B9A\u72B6\u6001\u4E0E\u7ED9\u5B9A\u6807\u8BB0\u5339\u914D\uFF0C\u5219</span>
    <span class="token comment">// 1. \u5982\u679C\u6807\u8BB0\u8868\u793A\u6301\u6709\u9501\uFF0C\u5219\u91CA\u653E\u5B83\u5E76\u8FD4\u56DE\u89C2\u5BDF\u6807\u8BB0\u3002</span>
    <span class="token comment">// 2. \u5982\u679C\u662F\u4E50\u89C2\u8BFB\u53D6\uFF0C\u5219\u5728\u9A8C\u8BC1\u540E\u8FD4\u56DE\u3002</span>
    <span class="token comment">// 3. \u6B64\u65B9\u6CD5\u5728\u6240\u6709\u5176\u4ED6\u60C5\u51B5\u4E0B\u90FD\u8FD4\u56DE\u96F6\uFF0C\u56E0\u6B64\u53EF\u7528\u4F5C\u201CtryUnlock\u201D\u7684\u4E00\u79CD\u5F62\u5F0F\u3002</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">tryConvertToOptimisticRead</span><span class="token punctuation">(</span><span class="token keyword">long</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> a <span class="token operator">=</span> stamp <span class="token operator">&amp;</span> ABITS<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next<span class="token punctuation">;</span> <span class="token class-name">WNode</span> h<span class="token punctuation">;</span>
        <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">loadFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> state<span class="token punctuation">)</span> <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>stamp <span class="token operator">&amp;</span> SBITS<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">=</span> s <span class="token operator">&amp;</span> ABITS<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> s<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> WBIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> m<span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                state <span class="token operator">=</span> next <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">+=</span> WBIT<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0L</span> <span class="token operator">?</span> ORIGIN <span class="token operator">:</span> s<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> whead<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token function">release</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0L</span> <span class="token operator">||</span> a <span class="token operator">&gt;=</span> WBIT<span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> RFULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> STATE<span class="token punctuation">,</span> s<span class="token punctuation">,</span> next <span class="token operator">=</span> s <span class="token operator">-</span> RUNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> RUNIT <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> whead<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                        <span class="token function">release</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> next <span class="token operator">&amp;</span> SBITS<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token function">tryDecReaderOverflow</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0L</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> next <span class="token operator">&amp;</span> SBITS<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0L</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),o=[e];function c(l,i){return s(),a("div",null,o)}var r=n(t,[["render",c],["__file","StampedLock.html.vue"]]);export{r as default};
