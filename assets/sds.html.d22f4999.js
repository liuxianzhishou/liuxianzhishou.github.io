import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";import{r as s,o as c,c as l,b as a,a as n,d as p,e as i}from"./app.5aebcaaa.js";const u={},k=n("h1",{id:"sds",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sds","aria-hidden":"true"},"#"),p(" \u{1F4AE} sds")],-1),r={href:"https://github.com/redis/redis/blob/7.0/src/sds.c",target:"_blank",rel:"noopener noreferrer"},d=p("\u5730\u5740"),v=i(`<h2 id="_1-\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_1-\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> 1. \u6570\u636E\u7ED3\u6784</h2><ul><li><code>__attribute__ ((__packed__))</code> \u7684\u4F5C\u7528\uFF1A <ul><li>\u8BA9\u7F16\u8BD1\u5668 \u4EE5 <mark>\u7D27\u51D1\u65B9\u5F0F</mark> \u5206\u914D\u5185\u5B58</li><li>\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u82E5\u6570\u636E\u7C7B\u578B\u4E0D\u540C\uFF0C\u6BD4\u5982\u4E00\u4E2A int \u548C\u4E00\u4E2A char \u4E00\u8D77\u5B58\u653E\uFF0C\u5219 char \u4E5F\u4F1A\u662F int \u7684\u56DB\u5B57\u8282\u957F\u5EA6</li><li>\u82E5\u6CA1\u6709\u8BE5\u5C5E\u6027\uFF0C\u5219\u7F16\u8BD1\u5668\u53EF\u80FD\u4F1A\u4E3A struct \u7684\u5B57\u6BB5\u505A\u4F18\u5316\u5BF9\u9F50\uFF0C\u5728\u5176\u4E2D\u586B\u5145\u7A7A\u5B57\u8282\uFF0C <ul><li>\u8FD9\u6837\u5C31\u65E0\u6CD5\u4FDD\u8BC1 header &amp; sds \u7684\u6570\u636E\u90E8\u5206\u4E25\u683C\u524D\u540E\u76F8\u90BB</li><li>\u4E5F\u5C31\u65E0\u6CD5\u6309\u7167 \u56FA\u5B9A\u5411\u4F4E\u5730\u5740\u65B9\u5411\u504F\u79FB 1 \u4E2A\u5B57\u8282 \u7684\u65B9\u5F0F\u83B7\u53D6 flag \u5B57\u6BB5\uFF0C\u8FDB\u800C\u65E0\u6CD5\u5F97\u51FA\u662F\u54EA\u79CD header \u7C7B\u578B</li></ul></li></ul></li><li>\u53EF\u4EE5\u5B58\u653E<mark>\u4EFB\u610F\u5B57\u7B26</mark><ul><li>C \u8BED\u8A00\u5B57\u7B26\u4E32\u4EE5 <code>\\0</code> \u5373 null \u5B57\u7B26\u4F5C\u4E3A\u5B57\u7B26\u4E32\u7684\u7EC8\u6B62\uFF0C\u56E0\u6B64\u5B57\u7B26\u4E32\u4E2D\u95F4\u67D0\u4E2A\u5B57\u7B26\u4E0D\u80FD\u5B58\u653E null</li><li>\u800C sds \u91C7\u7528 <code>{len + alloc + flags + char[]}</code> \u7684\u5F62\u5F0F\uFF0C\u65E0\u9700\u901A\u8FC7 null \u5224\u65AD\u5B57\u7B26\u4E32\u7684\u7EC8\u6B62\uFF0C\u800C\u662F\u6839\u636E\u957F\u5EA6\u3001\u7C7B\u578B\u8BA1\u7B97\u7EC8\u6B62\u4F4D\u7F6E\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5B58\u50A8\u4EFB\u610F\u5B57\u7B26</li></ul></li><li>\u83B7\u53D6\u5B57\u7B26\u4E32\u957F\u5EA6\u590D\u6742\u5EA6\u4E3A <code>O(1)</code></li><li>\u4E0D\u4F1A\u53D1\u751F <mark>\u7F13\u51B2\u533A\u7684\u6EA2\u51FA</mark><ul><li>\u5728\u5DF2\u6709\u5B57\u7B26\u4E32\u540E\u62FC\u63A5\u5B57\u7B26\u4E32\u65F6\uFF0C\u9996\u5148\u6839\u636E <code>alloc - len</code> \u5224\u65AD\u662F\u5426\u6709\u5269\u4F59\u8DB3\u591F\u7A7A\u95F4\uFF0C\u82E5\u5426\uFF0C\u5219\u5148\u6269\u5145 alloc \u5927\u5C0F</li><li>\u5728\u7533\u8BF7\u65B0\u7A7A\u95F4\u65F6\uFF0C\u82E5 <strong>\u65B0\u7A7A\u95F4 &lt; \u6700\u5927\u53EF\u7533\u8BF7\u5927\u5C0F(1024 * 1024 == 1MB)</strong>\uFF0C\u5219\u65B0\u7A7A\u95F4\u5927\u5C0F == <strong>2 * (\u539F\u5B57\u7B26\u4E32\u957F\u5EA6 + \u8FFD\u52A0\u5B57\u7B26\u4E32\u957F\u5EA6)</strong>\uFF0C\u5426\u5219\u4E3A <code>1MB</code></li><li>\u51CF\u5C11\u4E86\u6269\u5BB9\u7684\u6B21\u6570</li></ul></li><li>\u591A\u79CD sds \u6570\u636E\u7ED3\u6784\uFF0C<mark>\u8282\u7701\u5185\u5B58\u7A7A\u95F4</mark><ul><li>\u53EF\u7075\u6D3B\u6839\u636E\u4E0D\u540C\u5B57\u7B26\u4E32\u7684\u5927\u5C0F\u5206\u914D\u5408\u9002\u7684 \u6570\u636E\u7ED3\u6784\u5B58\u50A8</li></ul></li><li>\u7ED9\u5B9A sds \u7684\u7ED3\u6784\u5982\u4F55\u5206\u6790\uFF1F <ul><li>\u901A\u8FC7 char[] \u7684\u5730\u5740\u5411\u524D\u504F\u79FB 1 \u4E2A\u5B57\u8282\uFF0C\u8FD9\u4E2A\u5B57\u8282\u5C31\u662F <code>flags</code> \u6240\u5728\u7684\u5B57\u8282</li><li>\u901A\u8FC7\u5206\u6790 flag \u53EF\u4EE5\u5F97\u5230 header \u7684\u7C7B\u578B\uFF0C\u5224\u65AD\u662F <code>sdshdr5</code> \u8FD8\u662F <code>sdshdr8</code> \u7B49\u7B49</li><li>\u7136\u540E\u5C31\u53EF\u4EE5\u63A8\u65AD\u51FA header \u5BF9\u5E94\u7684\u5730\u5740\uFF0C\u7136\u540E\u5C31\u53EF\u4EE5\u8BFB\u53D6 len, alloc \u7B49\u5185\u5BB9\uFF0C\u518D\u4EE5\u6B64\u622A\u53D6\u6307\u5B9A\u957F\u5EA6\u7684\u5B57\u7B26\u6570\u5C31\u662F\u5B58\u50A8\u7684\u5B57\u7B26\u4E32\u4E86</li></ul></li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">char</span> <span class="token operator">*</span>sds<span class="token punctuation">;</span>

<span class="token comment">/* sdshdr5 \u4ECE\u672A\u88AB\u4F7F\u7528\u8FC7 */</span>
<span class="token comment">// \u6CA1\u6709 alloc \u5B57\u6BB5\uFF0C\u65E0\u6CD5\u4E3A\u5B57\u7B26\u4E32\u5206\u914D\u7A7A\u4F59\u7A7A\u95F4</span>
<span class="token comment">// \u82E5\u5B57\u7B26\u4E32\u52A8\u6001\u589E\u957F\uFF0C\u5FC5\u7136\u8981\u91CD\u65B0\u5206\u914D\u5185\u5B58</span>
<span class="token comment">// \u9002\u7528\u4E8E\u5B58\u50A8 \u9759\u6001\u7684\u77ED\u5B57\u7B26\u4E32 &amp;&amp; len &lt; 2^5</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr5</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* \u4E00\u4E2A\u5B57\u8282\uFF0C\u4F4E 3 \u4F4D\u8868\u793A header \u7684\u7C7B\u578B\uFF0C\u9AD8 5 \u4F4D\u8BB0\u5F55 \u5B57\u7B26\u4E32\u957F\u5EA6 */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr8</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* \u5B57\u7B26\u4E32\u7684\u5B57\u7B26\u6570\uFF0C\u4E0D\u5305\u542B len, alloc, flag \u4E4B\u7C7B\uFF0C\u5C31\u53EA\u662F \u4F7F\u7528\u7684\u5B57\u7B26\u7684\u957F\u5EA6 */</span>
    <span class="token class-name">uint8_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* \u5206\u914D\u7ED9\u5B57\u7B26\u4E32\u7684\u7A7A\u95F4\u957F\u5EA6\uFF0C\u4E0D\u5305\u542B flag \u548C null \u7ED3\u675F\u7B26\uFF0C\u901A\u8FC7 alloc - len \u53EF\u5F97\u51FA\u5269\u4F59\u5206\u914D\u7A7A\u95F4 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* \u4E00\u4E2A\u5B57\u8282\uFF0C\u4F4E 3 \u4F4D\u8868\u793A header \u7684\u7C7B\u578B\uFF0C\u9AD8 5 \u4F4D\u672A\u88AB\u4F7F\u7528 */</span>
    <span class="token comment">// \u5B57\u7B26\u6570\u7EC4\uFF0C\u957F\u5EA6 == \u6700\u5927\u5BB9\u91CF + 1\uFF0C\u5B58\u653E header &amp; data\uFF0C\u8FD9\u91CC + 1 \u662F\u56E0\u4E3A\u6700\u540E\u8981\u989D\u5916\u6DFB\u52A0\u4E00\u4E2A null(ASC\u2161 \u5BF9\u5E94 &#39;\\0&#39;) \u4EE5\u4FBF\u548C C \u517C\u5BB9</span>
    <span class="token comment">// \u8FD9\u91CC\u5E76\u6CA1\u6709\u6307\u5B9A\u6570\u7EC4\u957F\u5EA6\uFF0C\u8FD9\u65F6 C \u7684\u4E00\u79CD\u7279\u6B8A\u5199\u6CD5\uFF0C\u5728\u5206\u914D\u5185\u5B58\u65F6\uFF0C\u5E76\u4E0D\u5360\u7528\u5185\u5B58\u7A7A\u95F4\uFF0C\u4EC5\u4EC5\u662F\u4E00\u4E2A\u6807\u8BC6\u4F5C\u7528</span>
    <span class="token comment">// \u5728\u5206\u914D\u540E\uFF0C\u82E5\u8BA1\u7B97 sizeof(struct sdshdr8) \u5C31\u53EA\u4F1A\u5F97\u5230\u524D\u9762\u5B57\u6BB5\u7684\u957F\u5EA6 == 3 \u5B57\u8282</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr16</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* used */</span>
    <span class="token class-name">uint16_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* excluding the header and null terminator */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, 5 unused bits */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr32</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* used */</span>
    <span class="token class-name">uint32_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* excluding the header and null terminator */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, 5 unused bits */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr64</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint64_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* used */</span>
    <span class="token class-name">uint64_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* excluding the header and null terminator */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, 5 unused bits */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// \u5B9A\u4E49\u7684 header \u7C7B\u578B\uFF0C\u7528 flag \u7684\u4F4E 3 \u4F4D\u8868\u793A\uFF0C\u5171 5 \u4E2D\u7C7B\u578B</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDS_TYPE_5</span>  <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDS_TYPE_8</span>  <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDS_TYPE_16</span> <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDS_TYPE_32</span> <span class="token expression"><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDS_TYPE_64</span> <span class="token expression"><span class="token number">4</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-\u57FA\u7840\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#_2-\u57FA\u7840\u51FD\u6570" aria-hidden="true">#</a> 2. \u57FA\u7840\u51FD\u6570</h2><ul><li>\u5305\u542B\u5728 <code>.h</code> \u6587\u4EF6\u4E2D</li></ul><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDS_TYPE_MASK</span> <span class="token expression"><span class="token number">7</span> </span><span class="token comment">// \u7528\u4E8E\u83B7\u53D6 flag \u7684\u4F4E 3 \u4F4D</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDS_TYPE_BITS</span> <span class="token expression"><span class="token number">3</span> </span><span class="token comment">// header \u6240\u5360\u7684\u4F4D\u6570</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDS_HDR_VAR</span><span class="token expression"><span class="token punctuation">(</span>T<span class="token punctuation">,</span>s<span class="token punctuation">)</span> <span class="token keyword">struct</span> <span class="token class-name">sdshdr</span></span><span class="token punctuation">##</span><span class="token expression">T <span class="token operator">*</span>sh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span></span><span class="token punctuation">##</span><span class="token expression">T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDS_HDR</span><span class="token expression"><span class="token punctuation">(</span>T<span class="token punctuation">,</span>s<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span></span><span class="token punctuation">##</span><span class="token expression">T <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span></span><span class="token punctuation">##</span><span class="token expression">T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">// \u83B7\u53D6 header \u8D77\u59CB\u6307\u9488</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SDS_TYPE_5_LEN</span><span class="token expression"><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span>SDS_TYPE_BITS<span class="token punctuation">)</span> </span><span class="token comment">// \u83B7\u53D6 sdshdr5 \u7684 \u5B57\u7B26\u4E32\u5B57\u7B26\u6570\uFF0C\u5373\u83B7\u53D6 flag \u7684 \u9AD8 5 \u4F4D</span></span>

<span class="token comment">// \u83B7\u53D6\u5B57\u7B26\u4E32\u957F\u5EA6</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token class-name">size_t</span> <span class="token function">sdslen</span><span class="token punctuation">(</span><span class="token keyword">const</span> sds s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// s \u524D\u9762\u4E00\u4E2A\u5B57\u8282\u8868\u793A\u7684\u662F flags</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u4E0E SDS_TYPE_MASK \u60F3\u4E0E\uFF0C\u53EA\u4FDD\u7559\u4F4E 3 \u4F4D\u83B7\u53D6 header \u7C7B\u578B</span>
        <span class="token keyword">case</span> SDS_TYPE_5<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">SDS_TYPE_5_LEN</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u76F4\u63A5\u6C42 flags \u7684\u9AD8 5 \u4F4D\u5C31\u662F\u957F\u5EA6</span>
        <span class="token keyword">case</span> SDS_TYPE_8<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> <span class="token comment">// \u5F97\u5230 header \u6307\u9488\u6240\u5728\u5730\u5740\u540E\uFF0C\u90A3\u4E48\u6307\u5411\u7684\u5C31\u662F\u8FD9\u4E2A\u5BF9\u8C61\u4E86\uFF0C\u7136\u540E\u83B7\u53D6 sds.len \u76F4\u63A5\u8BFB\u53D6</span>
        <span class="token keyword">case</span> SDS_TYPE_16<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_32<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_64<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u83B7\u53D6\u5B57\u7B26\u4E32\u5269\u4F59\u53EF\u7528\u7A7A\u95F4 == alloc - len</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token class-name">size_t</span> <span class="token function">sdsavail</span><span class="token punctuation">(</span><span class="token keyword">const</span> sds s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SDS_TYPE_5<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// sdshdr5 \u4E00\u7ECF\u786E\u5B9A\uFF0C\u65E0\u6CD5\u5206\u914D\u52A8\u6001\u7A7A\u95F4</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> SDS_TYPE_8<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> sh<span class="token operator">-&gt;</span>alloc <span class="token operator">-</span> sh<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> SDS_TYPE_16<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> sh<span class="token operator">-&gt;</span>alloc <span class="token operator">-</span> sh<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> SDS_TYPE_32<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> sh<span class="token operator">-&gt;</span>alloc <span class="token operator">-</span> sh<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> SDS_TYPE_64<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> sh<span class="token operator">-&gt;</span>alloc <span class="token operator">-</span> sh<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u8BBE\u7F6E\u5B57\u7B26\u4E32\u957F\u5EA6</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sdssetlen</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> newlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SDS_TYPE_5<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token operator">*</span>fp <span class="token operator">=</span> SDS_TYPE_5 <span class="token operator">|</span> <span class="token punctuation">(</span>newlen <span class="token operator">&lt;&lt;</span> SDS_TYPE_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_8<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len <span class="token operator">=</span> newlen<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_16<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len <span class="token operator">=</span> newlen<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_32<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len <span class="token operator">=</span> newlen<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_64<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len <span class="token operator">=</span> newlen<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u589E\u52A0\u5B57\u7B26\u4E32\u957F\u5EA6</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sdsinclen</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> inc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags<span class="token operator">&amp;</span>SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SDS_TYPE_5<span class="token operator">:</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">unsigned</span> <span class="token keyword">char</span> newlen <span class="token operator">=</span> <span class="token function">SDS_TYPE_5_LEN</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token operator">+</span>inc<span class="token punctuation">;</span>
                <span class="token operator">*</span>fp <span class="token operator">=</span> SDS_TYPE_5 <span class="token operator">|</span> <span class="token punctuation">(</span>newlen <span class="token operator">&lt;&lt;</span> SDS_TYPE_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_8<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len <span class="token operator">+=</span> inc<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_16<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len <span class="token operator">+=</span> inc<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_32<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len <span class="token operator">+=</span> inc<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_64<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>len <span class="token operator">+=</span> inc<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* \u83B7\u53D6\u5B57\u7B26\u4E32\u5BB9\u91CF sdsalloc() = sdsavail() + sdslen() */</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token class-name">size_t</span> <span class="token function">sdsalloc</span><span class="token punctuation">(</span><span class="token keyword">const</span> sds s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags<span class="token operator">&amp;</span>SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SDS_TYPE_5<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">SDS_TYPE_5_LEN</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u76F4\u63A5\u8FD4\u56DE\u5B57\u7B26\u4E32\u957F\u5EA6</span>
        <span class="token keyword">case</span> SDS_TYPE_8<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alloc<span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_16<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alloc<span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_32<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alloc<span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_64<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alloc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u8BBE\u7F6E\u5B57\u7B26\u4E32\u5BB9\u91CF</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">sdssetalloc</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> newlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SDS_TYPE_5<span class="token operator">:</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// \u6CA1\u6709 alloc \u8FD9\u4E2A\u5B57\u6BB5\uFF0C\u81EA\u7136\u4E5F\u65E0\u6CD5\u8BBE\u7F6E\u5176\u503C</span>
        <span class="token keyword">case</span> SDS_TYPE_8<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alloc <span class="token operator">=</span> newlen<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_16<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alloc <span class="token operator">=</span> newlen<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_32<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alloc <span class="token operator">=</span> newlen<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_64<span class="token operator">:</span>
            <span class="token function">SDS_HDR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">-&gt;</span>alloc <span class="token operator">=</span> newlen<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-\u521B\u5EFA" tabindex="-1"><a class="header-anchor" href="#_3-\u521B\u5EFA" aria-hidden="true">#</a> 3. \u521B\u5EFA</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* Create a new sds string starting from a null terminated C string. */</span>
sds <span class="token function">sdsnew</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>init<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> initlen <span class="token operator">=</span> <span class="token punctuation">(</span>init <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">strlen</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">sdsnewlen</span><span class="token punctuation">(</span>init<span class="token punctuation">,</span> initlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u521B\u5EFA\u4E00\u4E2A\u521D\u59CB\u957F\u5EA6\u4E3A initlen \u7684\u5B57\u7B26\u4E32</span>
sds <span class="token function">sdsnewlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>init<span class="token punctuation">,</span> <span class="token class-name">size_t</span> initlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_sdsnewlen</span><span class="token punctuation">(</span>init<span class="token punctuation">,</span> initlen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

sds <span class="token function">_sdsnewlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>init<span class="token punctuation">,</span> <span class="token class-name">size_t</span> initlen<span class="token punctuation">,</span> <span class="token keyword">int</span> trymalloc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>sh<span class="token punctuation">;</span>
    sds s<span class="token punctuation">;</span>
    <span class="token keyword">char</span> type <span class="token operator">=</span> <span class="token function">sdsReqType</span><span class="token punctuation">(</span>initlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6839\u636E\u7ED9\u5B9A\u521D\u59CB\u957F\u5EA6\uFF0C\u786E\u5B9A\u4F7F\u7528\u54EA\u79CD sds</span>
     <span class="token comment">// \u5982\u679C\u5F97\u51FA\u662F\u8981\u7528 sdshdr5 \u90A3\u4E48\u9700\u8981\u91C7\u7528 sdshdr8\uFF0C\u56E0\u4E3A\u7A7A\u5B57\u7B26\u4E32\u521B\u5EFA\u540E\u4E00\u822C\u90FD\u9700\u8981\u8FFD\u52A0\u6570\u636E\uFF0C\u56E0\u6B64 dsshdr5 \u4E0D\u592A\u5408\u9002</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> SDS_TYPE_5 <span class="token operator">&amp;&amp;</span> initlen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> type <span class="token operator">=</span> SDS_TYPE_8<span class="token punctuation">;</span>
    <span class="token keyword">int</span> hdrlen <span class="token operator">=</span> <span class="token function">sdsHdrSize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5F53\u524D\u7C7B\u578B sds \u7684\u5185\u5B58\u5927\u5C0F\uFF0C\u8FD9\u91CC char[] \u8FD8\u672A\u5206\u914D\uFF0C\u56E0\u6B64\u5F97\u5230\u7684\u662F header \u7684\u5927\u5C0F</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>fp<span class="token punctuation">;</span> <span class="token comment">/* flags \u6307\u9488 */</span>
    <span class="token class-name">size_t</span> usable<span class="token punctuation">;</span>

    <span class="token function">assert</span><span class="token punctuation">(</span>initlen <span class="token operator">+</span> hdrlen <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> initlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Catch size_t overflow */</span>
    sh <span class="token operator">=</span> trymalloc<span class="token operator">?</span>
        <span class="token function">s_trymalloc_usable</span><span class="token punctuation">(</span>hdrlen<span class="token operator">+</span>initlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>usable<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token comment">// \u5C1D\u8BD5\u5206\u914D\u5185\u5B58 == header + initlen + null \u7ED3\u675F\u7B26</span>
        <span class="token function">s_malloc_usable</span><span class="token punctuation">(</span>hdrlen<span class="token operator">+</span>initlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>usable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u65E0\u8BBA\u5982\u4F55\u90FD\u8981\u5206\u914D\u5185\u5B58</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sh <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token operator">==</span>SDS_NOINIT<span class="token punctuation">)</span>
        init <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>init<span class="token punctuation">)</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hdrlen<span class="token operator">+</span>initlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>sh<span class="token operator">+</span>hdrlen<span class="token punctuation">;</span>
    fp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    usable <span class="token operator">=</span> usable<span class="token operator">-</span>hdrlen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>usable <span class="token operator">&gt;</span> <span class="token function">sdsTypeMaxSize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>
        usable <span class="token operator">=</span> <span class="token function">sdsTypeMaxSize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SDS_TYPE_5<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token operator">*</span>fp <span class="token operator">=</span> type <span class="token operator">|</span> <span class="token punctuation">(</span>initlen <span class="token operator">&lt;&lt;</span> SDS_TYPE_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> SDS_TYPE_8<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u83B7\u53D6 sds header \u5730\u5740</span>
            sh<span class="token operator">-&gt;</span>len <span class="token operator">=</span> initlen<span class="token punctuation">;</span> <span class="token comment">// \u4FEE\u6539 len</span>
            sh<span class="token operator">-&gt;</span>alloc <span class="token operator">=</span> usable<span class="token punctuation">;</span> <span class="token comment">// \u4FEE\u6539 alloc</span>
            <span class="token operator">*</span>fp <span class="token operator">=</span> type<span class="token punctuation">;</span> <span class="token comment">// \u8BBE\u7F6E flag \u7C7B\u578B</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> SDS_TYPE_16<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sh<span class="token operator">-&gt;</span>len <span class="token operator">=</span> initlen<span class="token punctuation">;</span>
            sh<span class="token operator">-&gt;</span>alloc <span class="token operator">=</span> usable<span class="token punctuation">;</span>
            <span class="token operator">*</span>fp <span class="token operator">=</span> type<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> SDS_TYPE_32<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sh<span class="token operator">-&gt;</span>len <span class="token operator">=</span> initlen<span class="token punctuation">;</span>
            sh<span class="token operator">-&gt;</span>alloc <span class="token operator">=</span> usable<span class="token punctuation">;</span>
            <span class="token operator">*</span>fp <span class="token operator">=</span> type<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> SDS_TYPE_64<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">SDS_HDR_VAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sh<span class="token operator">-&gt;</span>len <span class="token operator">=</span> initlen<span class="token punctuation">;</span>
            sh<span class="token operator">-&gt;</span>alloc <span class="token operator">=</span> usable<span class="token punctuation">;</span>
            <span class="token operator">*</span>fp <span class="token operator">=</span> type<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initlen <span class="token operator">&amp;&amp;</span> init<span class="token punctuation">)</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> init<span class="token punctuation">,</span> initlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>initlen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> <span class="token comment">// \u6700\u540E\u4E00\u4E2A\u6709\u6548\u5B57\u7B26\u662F null\uFF0C\u548C C \u517C\u5BB9</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6839\u636E\u7C7B\u578B\u83B7\u53D6 header \u7684\u5927\u5C0F</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sdsHdrSize</span><span class="token punctuation">(</span><span class="token keyword">char</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token operator">&amp;</span>SDS_TYPE_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> SDS_TYPE_5<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sdshdr5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_8<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sdshdr8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_16<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sdshdr16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_32<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sdshdr32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SDS_TYPE_64<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sdshdr64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6839\u636E\u7ED9\u5B9A\u5927\u5C0F\u786E\u5B9A\u4F7F\u7528\u54EA\u79CD sds \u7ED3\u6784</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token function">sdsReqType</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> string_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>string_size <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> SDS_TYPE_5<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>string_size <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> SDS_TYPE_8<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>string_size <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> SDS_TYPE_16<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>LONG_MAX <span class="token operator">==</span> LLONG_MAX<span class="token punctuation">)</span></span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>string_size <span class="token operator">&lt;</span> <span class="token number">1ll</span><span class="token operator">&lt;&lt;</span><span class="token number">32</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> SDS_TYPE_32<span class="token punctuation">;</span>
    <span class="token keyword">return</span> SDS_TYPE_64<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token keyword">return</span> SDS_TYPE_32<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6839\u636E\u6307\u5B9A sds \u7C7B\u578B\uFF0C\u83B7\u53D6 \u80FD\u591F\u5B58\u653E\u7684\u6700\u5927\u5B57\u7B26\u6570</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token class-name">size_t</span> <span class="token function">sdsTypeMaxSize</span><span class="token punctuation">(</span><span class="token keyword">char</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> SDS_TYPE_5<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> SDS_TYPE_8<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> SDS_TYPE_16<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token punctuation">(</span>LONG_MAX <span class="token operator">==</span> LLONG_MAX<span class="token punctuation">)</span></span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> SDS_TYPE_32<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1ll</span><span class="token operator">&lt;&lt;</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/* this is equivalent to the max SDS_TYPE_64 or SDS_TYPE_32 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-\u5B57\u7B26\u4E32\u62FC\u63A5" tabindex="-1"><a class="header-anchor" href="#_4-\u5B57\u7B26\u4E32\u62FC\u63A5" aria-hidden="true">#</a> 4. \u5B57\u7B26\u4E32\u62FC\u63A5</h2><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">/* \u5728 s \u540E\u9762\u8FFD\u52A0 t
 */</span>
sds <span class="token function">sdscatsds</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> sds t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">sdscatlen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* \u5728 s \u540E\u9762\u8FFD\u52A0 len \u957F\u5EA6\u7684 t */</span>
sds <span class="token function">sdscatlen</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> curlen <span class="token operator">=</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u83B7\u53D6 s \u7684\u957F\u5EA6</span>

    s <span class="token operator">=</span> <span class="token function">sdsMakeRoomFor</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>s<span class="token operator">+</span>curlen<span class="token punctuation">,</span> t<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sdssetlen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> curlen<span class="token operator">+</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>curlen<span class="token operator">+</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* \u7533\u8BF7\u591A\u4F59 \u6240\u9700\u7A7A\u95F2\u7A7A\u95F4 \u7684\u5927\u5C0F\uFF0C\u8FD9\u6837\u53EF\u4EE5\u907F\u514D\u9891\u7E41\u7684\u8FFD\u52A0\u6570\u636E\u5BFC\u81F4\u7684 \u9891\u7E41\u7684 \u5185\u5B58\u7533\u8BF7 */</span>
sds <span class="token function">sdsMakeRoomFor</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> addlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_sdsMakeRoomFor</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> addlen<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 
 * \u4E3A\u5B57\u7B26\u4E32\u7533\u8BF7\u8DB3\u591F\u7684\u7A7A\u95F4
 * \u82E5\u7A7A\u95F4\u672C\u8EAB\u5DF2\u7ECF\u8DB3\u591F\uFF0C\u90A3\u4E48\u65E0\u9700\u4EFB\u4F55\u64CD\u4F5C\uFF1B\u82E5\u7A7A\u95F4\u4E0D\u8DB3\u4EE5\u653E\u7F6E addlen\uFF0C\u90A3\u4E48\u9700\u8981\u7533\u8BF7\u66F4\u591A\u7684\u7A7A\u95F4
 * greedy == 1 \u65F6\uFF0C\u7533\u8BF7\u6BD4 \u6240\u9700\u66F4\u5927\u7684\u7A7A\u95F4\uFF0C\u4E3A\u4E86\u9632\u6B62\u672A\u6765\u9891\u7E41\u7684\u5185\u5B58\u7533\u8BF7
 * greedy == 0 \u65F6\uFF0C\u7533\u8BF7\u8DB3\u591F \u6240\u9700\u7A7A\u95F4\u5373\u53EF
 * \u8BE5\u51FD\u6570\u4E0D\u4F1A\u6539\u53D8\u901A\u8FC7 sdslen() \u5F97\u5230\u7684\u5B57\u7B26\u4E32\u5927\u5C0F\uFF0C\u800C\u4EC5\u4EC5\u662F\u7533\u8BF7\u4E86\u5185\u5B58
 */</span>
sds <span class="token function">_sdsMakeRoomFor</span><span class="token punctuation">(</span>sds s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> addlen<span class="token punctuation">,</span> <span class="token keyword">int</span> greedy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>sh<span class="token punctuation">,</span> <span class="token operator">*</span>newsh<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> avail <span class="token operator">=</span> <span class="token function">sdsavail</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> newlen<span class="token punctuation">,</span> reqlen<span class="token punctuation">;</span>
    <span class="token keyword">char</span> type<span class="token punctuation">,</span> oldtype <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> SDS_TYPE_MASK<span class="token punctuation">;</span>
    <span class="token keyword">int</span> hdrlen<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> usable<span class="token punctuation">;</span>

    <span class="token comment">/* 1. \u6709\u8DB3\u591F\u7A7A\u95F4\uFF0C\u76F4\u63A5\u8FD4\u56DE */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>avail <span class="token operator">&gt;=</span> addlen<span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>

    len <span class="token operator">=</span> <span class="token function">sdslen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token operator">-</span><span class="token function">sdsHdrSize</span><span class="token punctuation">(</span>oldtype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqlen <span class="token operator">=</span> newlen <span class="token operator">=</span> <span class="token punctuation">(</span>len<span class="token operator">+</span>addlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>newlen <span class="token operator">&gt;</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* Catch size_t overflow */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>greedy <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u9700\u8981\u7533\u8BF7\u8DB3\u591F\u7A7A\u95F4</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newlen <span class="token operator">&lt;</span> SDS_MAX_PREALLOC<span class="token punctuation">)</span>
            newlen <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// \u7533\u8BF7\u540E\u603B\u7A7A\u95F4\u5927\u5C0F == 2 * (\u539F\u5B57\u7B26\u4E32\u957F\u5EA6 + \u8FFD\u52A0\u5B57\u7B26\u4E32\u957F\u5EA6)</span>
        <span class="token keyword">else</span>
            newlen <span class="token operator">+=</span> SDS_MAX_PREALLOC<span class="token punctuation">;</span> <span class="token comment">// \u7533\u8BF7\u540E\u603B\u7A7A\u95F4\u5927\u5C0F == \u6700\u5927\u53EF\u7533\u8BF7\u5927\u5C0F(1024 * 1024 == 1MB)</span>
    <span class="token punctuation">}</span>

    type <span class="token operator">=</span> <span class="token function">sdsReqType</span><span class="token punctuation">(</span>newlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u83B7\u53D6\u65B0\u6570\u7EC4\u5927\u5C0F\u5BF9\u5E94\u7684 sds \u7C7B\u578B</span>

    <span class="token comment">/* \u82E5\u4E3A sds5\uFF0C\u53D8\u4E3A sds8 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> SDS_TYPE_5<span class="token punctuation">)</span> type <span class="token operator">=</span> SDS_TYPE_8<span class="token punctuation">;</span>

    hdrlen <span class="token operator">=</span> <span class="token function">sdsHdrSize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>hdrlen <span class="token operator">+</span> newlen <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> reqlen<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* Catch size_t overflow */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldtype<span class="token operator">==</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u7C7B\u578B\u6CA1\u6709\u53D8</span>
        newsh <span class="token operator">=</span> <span class="token function">s_realloc_usable</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> hdrlen<span class="token operator">+</span>newlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>usable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newsh <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>newsh<span class="token operator">+</span>hdrlen<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
        <span class="token comment">/* \u7C7B\u578B\u6539\u53D8\uFF0C\u6574\u4E2A\u5B57\u7B26\u4E32\u90FD\u9700\u8981\u91CD\u65B0\u5206\u914D */</span>
        newsh <span class="token operator">=</span> <span class="token function">s_malloc_usable</span><span class="token punctuation">(</span>hdrlen<span class="token operator">+</span>newlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>usable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u7533\u8BF7\u5185\u5B58</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newsh <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>newsh<span class="token operator">+</span>hdrlen<span class="token punctuation">,</span> s<span class="token punctuation">,</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5C06 \u539F\u5B57\u7B26\u4E32 \u590D\u5236\u5230\u65B0\u5185\u5B58</span>
        <span class="token function">s_free</span><span class="token punctuation">(</span>sh<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>newsh<span class="token operator">+</span>hdrlen<span class="token punctuation">;</span>
        s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> type<span class="token punctuation">;</span>
        <span class="token function">sdssetlen</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    usable <span class="token operator">=</span> usable<span class="token operator">-</span>hdrlen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>usable <span class="token operator">&gt;</span> <span class="token function">sdsTypeMaxSize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>
        usable <span class="token operator">=</span> <span class="token function">sdsTypeMaxSize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sdssetalloc</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> usable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SDS_MAX_PREALLOC</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function m(b,_){const e=s("Mermaid"),t=s("ExternalLinkIcon");return c(),l("div",null,[k,a(e,{id:"mermaid-1a96284d",code:"flowchart%20LR%0A%20%20subgraph%20left%0A%20%20%20%20direction%20TB%0A%20%20%20%20string%0A%20%20%20%20list%0A%20%20%20%20set%20%0A%20%20%20%20hash%20%0A%20%20%20%20zset%0A%20%20end%0A%20%20subgraph%20right%0A%20%20%20%20direction%20TB%0A%20%20%20%20sds%0A%20%20%20%20ziplist%20%0A%20%20%20%20quicklist%20%0A%20%20%20%20inset%20%0A%20%20%20%20dict%20%0A%20%20%20%20skiplist%0A%20%20end%0A%20%20string%20--%3E%20sds%0A%20%20list%20-.-%3E%20ziplist%0A%20%20list%20--%3E%20quicklist%0A%20%20set%20-.-%3E%20inset%0A%20%20set%20--%3E%20dict%0A%20%20hash%20-.-%3E%20ziplist%0A%20%20hash%20--%3E%20dict%0A%20%20zset%20-.-%3E%20ziplist%0A%20%20zset%20--%3E%20dict%0A%20%20zset%20--%3E%20skiplist%0A"}),n("p",null,[n("a",r,[d,a(t)])]),v])}var S=o(u,[["render",m],["__file","sds.html.vue"]]);export{S as default};
