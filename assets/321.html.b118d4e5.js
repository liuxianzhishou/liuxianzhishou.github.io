import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.5aebcaaa.js";var t="/assets/img_5.45480980.png",e="/assets/img_4.945f6c55.png";const o={},c=p('<h1 id="_321-\u62FC\u63A5\u6700\u5927\u6570" tabindex="-1"><a class="header-anchor" href="#_321-\u62FC\u63A5\u6700\u5927\u6570" aria-hidden="true">#</a> \u{1F315}\u{1F315} 321. \u62FC\u63A5\u6700\u5927\u6570</h1><p>\u96BE\u5EA6: \u{1F315}\u{1F315}</p><h3 id="\u95EE\u9898\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u63CF\u8FF0" aria-hidden="true">#</a> \u95EE\u9898\u63CF\u8FF0</h3><p><img src="'+t+`" alt="img_5.png"></p><hr><h3 id="\u89E3\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6CD5" aria-hidden="true">#</a> \u89E3\u6CD5</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u601D\u8DEF\uFF1A</span>
        <span class="token comment">// 1. \u4ECE nums1[] \u4E2D\u53D6\u51FA i \u4E2A\u6570\uFF0C\u4ECE nums2[] \u4E2D\u53D6\u51FA j \u4E2A\u6570\uFF0C\u53D6\u51FA\u7684\u6570\u5206\u522B\u662F\u80FD\u5F62\u6210\u7684\u5F53\u524D\u4E2A\u6570\u7684\u6700\u5927\u6570</span>
        <span class="token comment">// \u901A\u8FC7 \u5355\u8C03\u6808 \u7684\u65B9\u5F0F\u5B9E\u73B0</span>
        <span class="token comment">// 2. \u5BF9\u4E8E nums1[i] &amp; nums2[j] \u8FDB\u884C\u5408\u5E76\uFF0C\u5F97\u5230 arr[i + j] = arr[k]</span>
        <span class="token comment">// 3. \u5BF9\u4E8E\u5F53\u524D arr[k] \u5224\u65AD\u662F\u5426\u662F\u6240\u6709\u60C5\u51B5\u4E2D\u6700\u5927\u7684\uFF0C\u4ECE\u800C\u66F4\u65B0 res</span>

        <span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> k <span class="token operator">-</span> i<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aa <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bb <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmpArr <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span> bb<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareFromIndex</span><span class="token punctuation">(</span>tmpArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res <span class="token operator">=</span> tmpArr<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">compareFromIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aa<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bb<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u82E5 aa &gt; bb \u8FD4\u56DE true</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> aa<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// \u524D\u9762\u90FD\u76F8\u7B49\uFF0C\u90A3\u4E48\u540E\u9762\u7684\u6570\u4F4D\u6570\u591A\uFF0C\u56E0\u6B64 aa &lt; bb</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&gt;=</span> bb<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>aa<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&gt;</span> bb<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>aa<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&lt;</span> bb<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">compareFromIndex</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> bb<span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aa<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5408\u5E76\u6570\u7EC4</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmpArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> la <span class="token operator">=</span> aa<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> lb <span class="token operator">=</span> bb<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> la <span class="token operator">||</span> j <span class="token operator">&lt;</span> lb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareFromIndex</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span> i<span class="token punctuation">,</span> bb<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tmpArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                i <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                tmpArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> bb<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                j <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            index <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> tmpArr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5355\u8C03\u6808\uFF0C\u4ECE arr[] \u4E2D\u53D6\u51FA count \u4E2A\u6570</span>
        <span class="token comment">// \u7531\u4E8E \u6808 \u7684\u5927\u5C0F\u56FA\u5B9A\uFF0C\u56E0\u6B64\u53EF\u4EE5\u4F7F\u7528 \u6570\u7EC4 \u5B9E\u73B0</span>
        <span class="token comment">// System.out.println(Arrays.toString(arr) + &quot;  &quot; + count);</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> rm <span class="token operator">=</span> len <span class="token operator">-</span> count<span class="token punctuation">;</span> <span class="token comment">// \u9700\u8981\u5220\u9664\u7684\u5143\u7D20\u4E2A\u6570</span>
        <span class="token keyword">int</span> peekIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>peekIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> cur <span class="token operator">&lt;</span> stack<span class="token punctuation">[</span>peekIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>peekIndex <span class="token operator">&lt;</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    peekIndex <span class="token operator">++</span><span class="token punctuation">;</span>
                    stack<span class="token punctuation">[</span>peekIndex<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    rm <span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// \u6570\u7EC4\u653E\u4E0D\u4E0B\u8FD9\u4E2A\u6570\uFF0C\u53EA\u80FD\u5220\u9664</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> stack<span class="token punctuation">[</span>peekIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>peekIndex <span class="token operator">&lt;</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    peekIndex <span class="token operator">++</span><span class="token punctuation">;</span>
                    stack<span class="token punctuation">[</span>peekIndex<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    rm <span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// cur &gt; stack.peekLast() \u9700\u8981\u5F39\u6808 - \u5220\u9664\u6808\u9876\u5143\u7D20 - \u6362\u6210\u66F4\u5927\u7684\u6570</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>rm <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> peekIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cur <span class="token operator">&gt;</span> stack<span class="token punctuation">[</span>peekIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    peekIndex <span class="token operator">--</span><span class="token punctuation">;</span>
                    rm <span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>rm <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> 
                <span class="token keyword">if</span><span class="token punctuation">(</span>peekIndex <span class="token operator">&lt;</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    peekIndex <span class="token operator">++</span><span class="token punctuation">;</span>
                    stack<span class="token punctuation">[</span>peekIndex<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// \u53EA\u6709\u5F53 rm == 0 \u800C stack \u8FD8\u672A\u586B\u5145\u6EE1\uFF0C\u5269\u4E0B\u7684\u6570\u5B57\u5747\u9700\u4FDD\u7559\u65F6\uFF0C\u624D\u4F1A\u8FDB\u5165\u4E0B\u9762\u7684\u5FAA\u73AF</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>peekIndex <span class="token operator">&lt;</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            peekIndex <span class="token operator">++</span><span class="token punctuation">;</span>
            stack<span class="token punctuation">[</span>peekIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            i <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// System.out.println(Arrays.toString(stack) + &quot;  &quot; + count);</span>
        <span class="token comment">// System.out.println();</span>
        <span class="token keyword">return</span> stack<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="\u8F93\u51FA" tabindex="-1"><a class="header-anchor" href="#\u8F93\u51FA" aria-hidden="true">#</a> \u8F93\u51FA</h3><p><img src="`+e+'" alt="img_4.png"></p>',10),l=[c];function i(u,k){return s(),a("div",null,l)}var v=n(o,[["render",i],["__file","321.html.vue"]]);export{v as default};
