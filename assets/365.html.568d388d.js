import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.5aebcaaa.js";var t="/assets/img_13.6da67e85.png",e="/assets/img_12.34f6191d.png",c="/assets/img_14.e090e19b.png",o="/assets/img_15.19bfea0e.png";const l={},u=p('<h1 id="_365-\u6C34\u58F6\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#_365-\u6C34\u58F6\u95EE\u9898" aria-hidden="true">#</a> \u{1F315}\u{1F315} 365. \u6C34\u58F6\u95EE\u9898</h1><p>\u96BE\u5EA6: \u{1F315}\u{1F315}</p><h3 id="\u95EE\u9898\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u63CF\u8FF0" aria-hidden="true">#</a> \u95EE\u9898\u63CF\u8FF0</h3><p><img src="'+t+`" alt="img_13.png"></p><hr><h3 id="\u89E3\u6CD5-1-dfs" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6CD5-1-dfs" aria-hidden="true">#</a> \u89E3\u6CD5 1 - DFS</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> capX<span class="token punctuation">;</span>
    <span class="token keyword">int</span> capY<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canMeasureWater</span><span class="token punctuation">(</span><span class="token keyword">int</span> jug1Capacity<span class="token punctuation">,</span> <span class="token keyword">int</span> jug2Capacity<span class="token punctuation">,</span> <span class="token keyword">int</span> targetCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u601D\u8DEF\uFF1A</span>
        <span class="token comment">// \u6A21\u62DF\uFF0C\u5047\u8BBE 2 \u4E2A\u6C34\u58F6\u5206\u522B\u4E3A x, y \u521D\u59CB\u72B6\u6001\u4E0B\u5DF2\u6709\u6C34\u91CF\u4E3A curX, curY\uFF0C\u6700\u5927\u5BB9\u91CF\u5206\u522B\u4E3A capX, capY</span>
        <span class="token comment">// \u6BCF\u6B21\u5747\u6709 3 \u79CD\u64CD\u4F5C</span>
        <span class="token comment">// 1. \u88C5\u6EE1\u4EFB\u610F\u4E00\u4E2A\u6C34\u58F6 --&gt; [capX, curY] or [curX, capY]</span>
        <span class="token comment">// 2. \u6E05\u7A7A\u4EFB\u610F\u4E00\u4E2A\u6C34\u58F6 --&gt; [0, curY] or [curX, 0]</span>
        <span class="token comment">// 3. x \u5012\u5165 y or y \u5012\u5165 x </span>
        <span class="token comment">// 1) x \u5012\u5165 y --&gt; [0, curY + curX] or [curX - capY + curY, capY]</span>
        <span class="token comment">// 2) y \u5012\u5165 x --&gt; [curX + curY, 0] or [capX, curY - capX + curX]</span>
        <span class="token comment">// \u56E0\u6B64\u53EF\u4EE5\u91C7\u7528 DFS | BFS \u641C\u7D22</span>
        <span class="token comment">// \u901A\u8FC7 set \u53BB\u91CD</span>
        capX <span class="token operator">=</span> jug1Capacity<span class="token punctuation">;</span>
        capY <span class="token operator">=</span> jug2Capacity<span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>targetCapacity <span class="token operator">&gt;</span> capX <span class="token operator">+</span> capY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">mySol</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> targetCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">mySol</span><span class="token punctuation">(</span><span class="token keyword">int</span> curX<span class="token punctuation">,</span> <span class="token keyword">int</span> curY<span class="token punctuation">,</span> <span class="token keyword">int</span> targetCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// System.out.println(curX + &quot;, &quot; + curY + &quot; ; &quot; + targetCapacity);</span>
        <span class="token comment">// \u9012\u5F52\u7EC8\u6B62\u6761\u4EF6</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>targetCapacity <span class="token operator">==</span> curX <span class="token operator">||</span> targetCapacity <span class="token operator">==</span> curY <span class="token operator">||</span> targetCapacity <span class="token operator">==</span> curX <span class="token operator">+</span> curY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token function">getHash</span><span class="token punctuation">(</span>curX<span class="token punctuation">,</span> curY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// \u8BF4\u660E\u51FA\u73B0\u4E86\u5FAA\u73AF</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getHash</span><span class="token punctuation">(</span>curX<span class="token punctuation">,</span> curY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// situation 1 - \u53EA\u6709\u5F80\u7A7A\u58F6\u4E2D\u5012\u6EE1\u6C34\u624D\u6709\u610F\u4E49</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>curX <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mySol</span><span class="token punctuation">(</span>capX<span class="token punctuation">,</span> curY<span class="token punctuation">,</span> targetCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>curY <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mySol</span><span class="token punctuation">(</span>curX<span class="token punctuation">,</span> capY<span class="token punctuation">,</span> targetCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// situation 2</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>curX <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mySol</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> curY<span class="token punctuation">,</span> targetCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>curY <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mySol</span><span class="token punctuation">(</span>curX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> targetCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// situation 3</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>curX <span class="token operator">+</span> curY <span class="token operator">&lt;=</span> capY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mySol</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> curX <span class="token operator">+</span> curY<span class="token punctuation">,</span> targetCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mySol</span><span class="token punctuation">(</span>curY <span class="token operator">+</span> curX <span class="token operator">-</span> capY<span class="token punctuation">,</span> capY<span class="token punctuation">,</span> targetCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>curX <span class="token operator">+</span> curY <span class="token operator">&lt;=</span> capX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getHash</span><span class="token punctuation">(</span>curX <span class="token operator">+</span> curY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mySol</span><span class="token punctuation">(</span>curY <span class="token operator">+</span> curX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> targetCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mySol</span><span class="token punctuation">(</span>capX<span class="token punctuation">,</span> curY <span class="token operator">+</span> curX <span class="token operator">-</span> capX<span class="token punctuation">,</span> targetCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5C06 2 \u4E2A32\u4F4D int \u6570\u8F6C\u4E3A\u4E00\u4E2A long \u503C</span>
        <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="\u8F93\u51FA-1" tabindex="-1"><a class="header-anchor" href="#\u8F93\u51FA-1" aria-hidden="true">#</a> \u8F93\u51FA 1</h3><p><img src="`+e+`" alt="img_12.png"></p><hr><h3 id="\u89E3\u6CD5-2-bfs" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6CD5-2-bfs" aria-hidden="true">#</a> \u89E3\u6CD5 2 - BFS</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> capX<span class="token punctuation">;</span>
    <span class="token keyword">int</span> capY<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canMeasureWater</span><span class="token punctuation">(</span><span class="token keyword">int</span> jug1Capacity<span class="token punctuation">,</span> <span class="token keyword">int</span> jug2Capacity<span class="token punctuation">,</span> <span class="token keyword">int</span> targetCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u601D\u8DEF\uFF1A</span>
        <span class="token comment">// \u6A21\u62DF\uFF0C\u5047\u8BBE 2 \u4E2A\u6C34\u58F6\u5206\u522B\u4E3A x, y \u521D\u59CB\u72B6\u6001\u4E0B\u5DF2\u6709\u6C34\u91CF\u4E3A curX, curY\uFF0C\u6700\u5927\u5BB9\u91CF\u5206\u522B\u4E3A capX, capY</span>
        <span class="token comment">// \u6BCF\u6B21\u5747\u6709 3 \u79CD\u64CD\u4F5C</span>
        <span class="token comment">// 1. \u88C5\u6EE1\u4EFB\u610F\u4E00\u4E2A\u6C34\u58F6 --&gt; [capX, curY] or [curX, capY]</span>
        <span class="token comment">// 2. \u6E05\u7A7A\u4EFB\u610F\u4E00\u4E2A\u6C34\u58F6 --&gt; [0, curY] or [curX, 0]</span>
        <span class="token comment">// 3. x \u5012\u5165 y or y \u5012\u5165 x </span>
        <span class="token comment">// 1) x \u5012\u5165 y --&gt; [0, curY + curX] or [curX - capY + curY, capY]</span>
        <span class="token comment">// 2) y \u5012\u5165 x --&gt; [curX + curY, 0] or [capX, curY - capX + curX]</span>
        <span class="token comment">// \u56E0\u6B64\u53EF\u4EE5\u91C7\u7528 DFS | BFS \u641C\u7D22</span>
        <span class="token comment">// \u901A\u8FC7 set \u53BB\u91CD</span>
        capX <span class="token operator">=</span> jug1Capacity<span class="token punctuation">;</span>
        capY <span class="token operator">=</span> jug2Capacity<span class="token punctuation">;</span>
        <span class="token comment">// \u7279\u6B8A\u60C5\u51B5\u7279\u5224</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>targetCapacity <span class="token operator">&gt;</span> capX <span class="token operator">+</span> capY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>targetCapacity <span class="token operator">==</span> capX <span class="token operator">+</span> capY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// BFS</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u538B\u5165\u521D\u59CB\u72B6\u6001</span>
        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u83B7\u53D6\u5F53\u524D\u72B6\u6001</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u6839\u636E\u961F\u5217\u4E2D\u7684\u503C\u8F6C\u6362\u4E3A x &amp; y</span>
                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token function">hashBefore</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> curX <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> curY <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// System.out.println(Arrays.toString(tmp));</span>
                <span class="token comment">// \u5224\u65AD\u5F53\u524D cur \u662F\u5426\u6EE1\u8DB3\u6761\u4EF6</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>targetCapacity <span class="token operator">==</span> curX <span class="token operator">||</span> targetCapacity <span class="token operator">==</span> curY <span class="token operator">||</span> targetCapacity <span class="token operator">==</span> curX <span class="token operator">+</span> curY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// situation 1 \u5C1D\u8BD5</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>curX <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u53EA\u6709\u676F\u5B50\u7A7A\u65F6\u5012\u6EE1\u624D\u6709\u7528\uFF0C\u534A\u6EE1\u7684\u676F\u5B50\u5012\u6EE1\u65E0\u610F\u4E49\uFF0C\u76F8\u5F53\u4E8E\u4ECE\u7A7A\u676F\u5012\u6EE1</span>
                    <span class="token keyword">long</span> tmp1 <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>capX<span class="token punctuation">,</span> curY<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>curY <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">long</span> tmp1 <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>curX<span class="token punctuation">,</span> capY<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// sit2 </span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>curX <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u53EA\u6709\u676F\u5B50\u6709\u6C34\u65F6\uFF0C\u6E05\u7A7A\u676F\u5B50\u624D\u6709\u610F\u4E49</span>
                    <span class="token keyword">long</span> tmp1 <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> curY<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>curY <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">long</span> tmp1 <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>curX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// sit3</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>curX <span class="token operator">+</span> curY <span class="token operator">&lt;=</span> capY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">long</span> tmp1 <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> curX <span class="token operator">+</span> curY<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">long</span> tmp1 <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>curX <span class="token operator">-</span> capY <span class="token operator">+</span> curY<span class="token punctuation">,</span> capY<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>curX <span class="token operator">+</span> curY <span class="token operator">&lt;=</span> capX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">long</span> tmp1 <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>curX <span class="token operator">+</span> curY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">long</span> tmp1 <span class="token operator">=</span> <span class="token function">getHash</span><span class="token punctuation">(</span>capX<span class="token punctuation">,</span> curY <span class="token operator">-</span> capX <span class="token operator">+</span> curX<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">hashBefore</span><span class="token punctuation">(</span><span class="token keyword">long</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>input<span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5C06 2 \u4E2A32\u4F4D int \u6570\u8F6C\u4E3A\u4E00\u4E2A long \u503C</span>
        <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="\u8F93\u51FA-2" tabindex="-1"><a class="header-anchor" href="#\u8F93\u51FA-2" aria-hidden="true">#</a> \u8F93\u51FA 2</h3><p><img src="`+c+`" alt="img_14.png"></p><hr><h3 id="\u89E3\u6CD5-3-\u6570\u5B66" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6CD5-3-\u6570\u5B66" aria-hidden="true">#</a> \u89E3\u6CD5 3 - \u6570\u5B66</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> capX<span class="token punctuation">;</span>
    <span class="token keyword">int</span> capY<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canMeasureWater</span><span class="token punctuation">(</span><span class="token keyword">int</span> jug1Capacity<span class="token punctuation">,</span> <span class="token keyword">int</span> jug2Capacity<span class="token punctuation">,</span> <span class="token keyword">int</span> targetCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u601D\u8DEF\uFF1A</span>
        <span class="token comment">// \u6A21\u62DF\uFF0C\u5047\u8BBE 2 \u4E2A\u6C34\u58F6\u5206\u522B\u4E3A x, y \u521D\u59CB\u72B6\u6001\u4E0B\u5DF2\u6709\u6C34\u91CF\u4E3A curX, curY\uFF0C\u6700\u5927\u5BB9\u91CF\u5206\u522B\u4E3A capX, capY</span>
        <span class="token comment">// \u6BCF\u6B21\u5747\u6709 3 \u79CD\u64CD\u4F5C</span>
        <span class="token comment">// 1. \u88C5\u6EE1\u4EFB\u610F\u4E00\u4E2A\u6C34\u58F6 --&gt; [capX, curY] or [curX, capY]</span>
        <span class="token comment">// 2. \u6E05\u7A7A\u4EFB\u610F\u4E00\u4E2A\u6C34\u58F6 --&gt; [0, curY] or [curX, 0]</span>
        <span class="token comment">// 3. x \u5012\u5165 y or y \u5012\u5165 x </span>
        <span class="token comment">// 1) x \u5012\u5165 y --&gt; [0, curY + curX] or [curX - capY + curY, capY]</span>
        <span class="token comment">// 2) y \u5012\u5165 x --&gt; [curX + curY, 0] or [capX, curY - capX + curX]</span>
        <span class="token comment">// </span>
        <span class="token comment">// \u4EE5\u4E0A 3 \u79CD\u64CD\u4F5C\u4E2D\uFF0C</span>
        <span class="token comment">// 1. \u5BFC\u81F4 \u6574\u4F53 + capX | + capY</span>
        <span class="token comment">// 2. \u5BFC\u81F4 \u6574\u4F53 - capX | - capY</span>
        <span class="token comment">// 3. \u5BFC\u81F4 \u6574\u4F53\u6C34\u91CF\u4E0D\u53D8</span>
        <span class="token comment">// </span>
        <span class="token comment">// \u4E5F\u5C31\u662F\u8BF4\uFF0C</span>
        <span class="token comment">// \u65E0\u8BBA\u600E\u4E48\u53D8\u6362\uFF0C\u53EF\u4EE5\u901A\u8FC7\u516C\u5F0F a*capX + b*capY \u8868\u793A</span>
        <span class="token comment">// \u5373\u627E\u5230\u6EE1\u8DB3\u6761\u4EF6\u7684 a &amp; b \u4F7F\u5F97 a*capX + b*capY = targetCapacity</span>
        <span class="token comment">// \u5373\u627E\u5230 capX &amp; capY \u7684\u6700\u5927\u516C\u7EA6\u6570 c\uFF0C\u5224\u65AD targetCapacity \u662F\u5426\u4E3A c \u7684\u500D\u6570</span>
        <span class="token comment">// \u5982\u4F55\u627E\u5230 2 \u4E2A\u6570\u7684\u6700\u5927\u516C\u7EA6\u6570\uFF1F</span>
        <span class="token comment">// \u5FAA\u73AF\u53D6\u4F59\uFF0C\u6BCF\u6B21\u627E\u5230\u8F83\u5927\u7684\u6570\uFF0C\u8BA9\u5176\u51CF\u53BB\u8F83\u5C0F\u6570\uFF0C\u76F4\u5230 2 \u4E2A\u6570\u76F8\u7B49\uFF0C\u5373\u4E3A\u6700\u5927\u516C\u7EA6\u6570</span>
        capX <span class="token operator">=</span> jug1Capacity<span class="token punctuation">;</span>
        capY <span class="token operator">=</span> jug2Capacity<span class="token punctuation">;</span>
        <span class="token comment">// \u7279\u6B8A\u60C5\u51B5\u7279\u5224</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>targetCapacity <span class="token operator">&gt;</span> capX <span class="token operator">+</span> capY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>targetCapacity <span class="token operator">==</span> capX <span class="token operator">+</span> capY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">mySol</span><span class="token punctuation">(</span>capX<span class="token punctuation">,</span> capY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> targetCapacity <span class="token operator">%</span> c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">mySol</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>
            a <span class="token operator">=</span> b<span class="token punctuation">;</span>
            b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// a &gt;= b</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// a &gt; b</span>
        <span class="token keyword">return</span> <span class="token function">mySol</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="\u8F93\u51FA-3" tabindex="-1"><a class="header-anchor" href="#\u8F93\u51FA-3" aria-hidden="true">#</a> \u8F93\u51FA 3</h3><p><img src="`+o+'" alt="img_15.png"></p>',22),i=[u];function k(r,d){return s(),a("div",null,i)}var b=n(l,[["render",k],["__file","365.html.vue"]]);export{b as default};
