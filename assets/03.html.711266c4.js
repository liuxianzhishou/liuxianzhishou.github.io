import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.5aebcaaa.js";var t="/assets/img_5.3e1ff0e8.png",o="/assets/img_4.3ac9f015.png";const e={},c=p('<h1 id="lcp-03-\u673A\u5668\u4EBA\u5927\u5192\u9669" tabindex="-1"><a class="header-anchor" href="#lcp-03-\u673A\u5668\u4EBA\u5927\u5192\u9669" aria-hidden="true">#</a> \u{1F315}\u{1F315} LCP 03. \u673A\u5668\u4EBA\u5927\u5192\u9669</h1><p>\u96BE\u5EA6: \u{1F315}\u{1F315}</p><h3 id="\u95EE\u9898\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u63CF\u8FF0" aria-hidden="true">#</a> \u95EE\u9898\u63CF\u8FF0</h3><p><img src="'+t+`" alt="img_5.png"></p><hr><h3 id="\u89E3\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6CD5" aria-hidden="true">#</a> \u89E3\u6CD5</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> diffx<span class="token punctuation">;</span>
    <span class="token keyword">int</span> diffy<span class="token punctuation">;</span>
    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8BB0\u5F55\u521D\u59CB\u5468\u671F\u80FD\u5230\u8FBE\u7684\u6240\u6709\u4F4D\u7F6E</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">robot</span><span class="token punctuation">(</span><span class="token class-name">String</span> command<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> obstacles<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u601D\u8DEF\uFF1A</span>
        <span class="token comment">// \u5F53 x &amp; y \u8FC7\u5927\u65F6\uFF0C\u65E0\u6CD5\u901A\u8FC7\u6A21\u62DF\uFF0C\u8D85\u51FA\u65F6\u95F4\u8303\u56F4</span>
        <span class="token comment">// \u6BCF\u5468\u671F\u8FD0\u884C\u540E\uFF0Cdiffx &amp; diffy \u662F\u786E\u5B9A\u7684\uFF0C\u56E0\u6B64\u53EF\u4EE5\u5F97\u51FA </span>
        <span class="token comment">// x &amp; y \u5728\u65E0\u969C\u788D\u7269\u7684\u60C5\u51B5\u4E0B\uFF0C\u5BF9\u5E94\u521D\u59CB\u5468\u671F\u7684\u54EA\u4E2A\u4F4D\u7F6E\uFF0C\u5224\u65AD\u521D\u59CB\u5468\u671F\u4E2D\u8FD9\u4E2A\u4E0B\u6807\u80FD\u5426\u8FBE\u5230\u5373\u53EF</span>
        <span class="token comment">// \u800C\u5BF9\u4E8E\u969C\u788D\u7269\uFF0C\u9700\u8981\u4FDD\u8BC1\u5728\u8FBE\u5230\u7EC8\u70B9\u4E4B\u524D\uFF0C\u65E0\u6CD5\u8FBE\u5230\u624D\u80FD\u4FDD\u8BC1\u65E0\u6CD5\u9047\u5230</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u8BA1\u7B97\u6BCF\u4E2A\u5468\u671F\u7684 x &amp; y \u53D8\u5316\u91CF</span>
        diffx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        diffy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;0#0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;U&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                diffy <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                diffx <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>diffx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>diffy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u5224\u65AD\u65E0\u969C\u788D\u7269\u7684\u60C5\u51B5\u4E0B\u80FD\u5426\u5230\u8FBE (x, y)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValid</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u904D\u5386\u969C\u788D\u7269\uFF0C\u4FDD\u8BC1\u5728\u5230\u8FBE (x, y) \u4E4B\u524D\u6CA1\u6709\u9047\u5230\u969C\u788D\u7269</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cur<span class="token operator">:</span> obstacles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> command<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x <span class="token operator">/</span> diffx<span class="token punctuation">,</span> y <span class="token operator">/</span> diffy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">-</span> diffx <span class="token operator">*</span> count<span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> y <span class="token operator">-</span> diffy <span class="token operator">*</span> count<span class="token punctuation">;</span> <span class="token comment">// \u5BF9\u5E94\u521D\u59CB\u5468\u671F\u7684\u4E0B\u6807\u503C</span>
        <span class="token comment">// \u5224\u65AD\u80FD\u5426\u5230\u8FBE (a, b)</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>
        <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="\u8F93\u51FA" tabindex="-1"><a class="header-anchor" href="#\u8F93\u51FA" aria-hidden="true">#</a> \u8F93\u51FA</h3><p><img src="`+o+'" alt="img_4.png"></p>',10),l=[c];function i(u,k){return s(),a("div",null,l)}var m=n(e,[["render",i],["__file","03.html.vue"]]);export{m as default};
