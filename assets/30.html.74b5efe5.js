import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.5aebcaaa.js";var t="/assets/img_1.a4c43a4a.png",o="/assets/img.d05d3120.png";const e={},c=p('<h1 id="_30-\u4E32\u8054\u6240\u6709\u5355\u8BCD\u7684\u5B50\u4E32" tabindex="-1"><a class="header-anchor" href="#_30-\u4E32\u8054\u6240\u6709\u5355\u8BCD\u7684\u5B50\u4E32" aria-hidden="true">#</a> \u{1F315}\u{1F315}\u{1F317} 30. \u4E32\u8054\u6240\u6709\u5355\u8BCD\u7684\u5B50\u4E32</h1><p>\u96BE\u5EA6: \u{1F315}\u{1F315}\u{1F317}</p><h3 id="\u95EE\u9898\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u63CF\u8FF0" aria-hidden="true">#</a> \u95EE\u9898\u63CF\u8FF0</h3><p><img src="'+t+`" alt="img_1.png"></p><hr><h3 id="\u89E3\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u89E3\u6CD5" aria-hidden="true">#</a> \u89E3\u6CD5</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">findSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u601D\u8DEF\uFF1A</span>
        <span class="token comment">// \u6ED1\u52A8\u7A97\u53E3</span>
        <span class="token comment">// \u9996\u5148 map \u8BB0\u5F55 words \u5404\u5355\u8BCD\u53CA\u51FA\u73B0\u7684\u9891\u7387</span>
        <span class="token comment">// \u7A97\u53E3\u5927\u5C0F\u4E3A item * len</span>
        <span class="token comment">// \u6BCF\u6B21\u7684\u7A97\u53E3\u6ED1\u52A8\u65F6\uFF0C\u4EE5 len \u4E3A\u5355\u4F4D\u8FDB\u884C\u6ED1\u52A8</span>
        <span class="token comment">// \u7A97\u53E3\u521D\u59CB\u4E0B\u6807\uFF0C\u5C31\u5FC5\u987B\u662F\u4ECE [0, len - 1] \u5F00\u59CB\uFF0C\u4F9D\u6B21\u5C1D\u8BD5\uFF0C\u6BCF\u6B21\u5C31\u662F\u4E00\u4E2A\u5B8C\u6574\u7684\u6ED1\u52A8\u5230\u672B\u5C3E\u7684\u8FC7\u7A0B</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> single <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> total <span class="token operator">=</span> len <span class="token operator">*</span> single<span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
                count <span class="token operator">++</span><span class="token punctuation">;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">&lt;</span> total<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u4F9D\u6B21\u4ECE\u4E0D\u540C\u8D77\u59CB\u4E0B\u6807\u5F00\u59CB\u8FDB\u884C\u6ED1\u52A8\u7A97\u53E3\u7684\u904D\u5386</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> single<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> end <span class="token operator">=</span> i <span class="token operator">+</span> total<span class="token punctuation">;</span> <span class="token comment">// \u521D\u59CB\u6ED1\u52A8\u7A97\u53E3\u7684\u53F3\u8FB9\u754C</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">&gt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">int</span> right <span class="token operator">=</span> i <span class="token operator">+</span> single<span class="token punctuation">;</span> <span class="token comment">// \u8FD9\u91CC\u53EF\u4EE5\u770B\u51FA\uFF0C\u53F3\u8FB9\u754C\u4E3A\u5F00\u533A\u95F4</span>
            <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tmpMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8BB0\u5F55\u5F53\u524D\u6ED1\u52A8\u7A97\u53E3\u7684\u5B57\u7B26\u4E32\u5173\u7CFB</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// \u5DF2\u7ECF\u5B8C\u5168\u5339\u914D\u7684\u4E2A\u6570</span>
            <span class="token keyword">int</span> ll <span class="token operator">=</span> left<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u4EE5 len \u4E3A\u5355\u4F4D\u8FDB\u884C\u9009\u53D6</span>
                <span class="token class-name">String</span> cur <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>ll<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tmpMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        tmpMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        count <span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">int</span> fre <span class="token operator">=</span> tmpMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> 
                        fre <span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// \u5B9E\u9645\u62E5\u6709\u7684\u4E2A\u6570</span>
                        tmpMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> fre<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">int</span> mapCount <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u671F\u671B\u62E5\u6709\u7684\u4E2A\u6570</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>fre <span class="token operator">&lt;=</span> mapCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            count <span class="token operator">++</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                right <span class="token operator">+=</span> single<span class="token punctuation">;</span>
                ll <span class="token operator">+=</span> single<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u521D\u59CB\u7A97\u53E3\u5F62\u6210</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            right <span class="token operator">-=</span> single<span class="token punctuation">;</span>
            <span class="token comment">// System.out.println(right + &quot;  &quot; + count);</span>
            <span class="token comment">// \u5411\u53F3\u6ED1\u52A8\u7A97\u53E3\uFF0C\u6BCF\u6B21\u4F9D\u65E7\u6ED1\u52A8\u4E00\u4E2A\u5355\u8BCD\u7684\u957F\u5EA6</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> size <span class="token operator">-</span> single<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> rv <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> left <span class="token operator">+</span> single<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8981\u79FB\u9664\u7684\u5355\u8BCD</span>
                left <span class="token operator">+=</span> single<span class="token punctuation">;</span> <span class="token comment">// \u66F4\u65B0 left</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// map \u6709\u8BE5\u5B57\u7B26\uFF0C\u90A3\u4E48 tmpMap \u4E2D\u80AF\u5B9A\u4E5F\u4FDD\u5B58\u4E86</span>
                    <span class="token keyword">int</span> mapCount <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> fre <span class="token operator">=</span> tmpMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// \u5224\u65AD\u8BE5\u5355\u8BCD\u53BB\u6389\u540E\uFF0C\u662F\u5426\u5F71\u54CD\u5339\u914D\u7684\u5B57\u7B26\u4E32\u7684\u4E2A\u6570</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>fre <span class="token operator">&lt;=</span> mapCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        count <span class="token operator">--</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    fre <span class="token operator">--</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>fre <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        tmpMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        tmpMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>rv<span class="token punctuation">,</span> fre<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">String</span> add <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> right <span class="token operator">+</span> single<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u65B0\u589E\u7684\u5355\u8BCD</span>
                right <span class="token operator">+=</span> single<span class="token punctuation">;</span> <span class="token comment">// \u66F4\u65B0 right</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tmpMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        tmpMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        count <span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">int</span> fre <span class="token operator">=</span> tmpMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        fre <span class="token operator">++</span><span class="token punctuation">;</span>
                        tmpMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> fre<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">int</span> mapCount <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// \u5224\u65AD\u662F\u5426\u662F\u591A\u4F59\u5355\u8BCD</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>fre <span class="token operator">&lt;=</span> mapCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            count <span class="token operator">++</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// System.out.println(left + &quot;  &quot; + rv + &quot;  &quot; + add + &quot;  &quot; + count);</span>
                <span class="token comment">// \u5224\u65AD\u6B64\u65F6\u662F\u5426\u6EE1\u8DB3\u6761\u4EF6</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="\u8F93\u51FA" tabindex="-1"><a class="header-anchor" href="#\u8F93\u51FA" aria-hidden="true">#</a> \u8F93\u51FA</h3><p><img src="`+o+'" alt="img.png"></p>',10),l=[c];function i(u,k){return s(),a("div",null,l)}var m=n(e,[["render",i],["__file","30.html.vue"]]);export{m as default};
